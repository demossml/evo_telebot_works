from bd.model import (
    Shop,
    Products,
    Documents,
    Session,
    Employees,
    GroupUuidAks,
    –°onsent,
)
from .util import (
    get_intervals,
    period_to_date,
    get_shops_user_id,
    get_group,
    get_period_day,
    period_to_date_2,
    get_period,
    get_products,
    get_shops_uuid_user_id,
    get_products_shops,
    get_shops,
    period_first_day_of_the_month,
    status_employee,
)


from arrow import utcnow, get
from pprint import pprint
import sys


class ReportsMarriageInput:
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "marriage_registration", "name": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—Ä–∞–∫–∞üö≠‚ö†Ô∏è‚û°Ô∏è".upper()},
            {"id": "get_marriage", "name": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—Ä–∞–∫ –Ω–∞—Ç –¢–¢üö≠‚ö†Ô∏è‚û°Ô∏è".upper()},
        ]

        return output


class ReportsShiftOpeningInput:
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session):
        if session.employee.role == "CASHIER":
            output = [
                {"id": "shift_opening_report", "name": "–û—Ç–∫—Ä—ã—Ç–∏–µ –¢–¢ ‚û°Ô∏è".upper()},
            ]
        else:
            output = [
                {"id": "shift_opening_report", "name": "–û—Ç–∫—Ä—ã—Ç–∏–µ –¢–¢ ‚û°Ô∏è".upper()},
                {
                    "id": "get_shift_opening_report",
                    "name": "‚åõ üí∞ üì∑ –û–¢–ß–ï–¢–´ –û–ë –û–¢–ö–†–´–¢–ò–ò –¢–¢ ‚û°Ô∏è ",
                },
                {"id": "get_schedules", "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º—è/—á–∏–∫–∏–Ω–∞ üïí ‚û°Ô∏è".upper()},
                {"id": "get_break", "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º—è/–ø–µ—Ä–µ—Ä—ã–≤–∞ üïí ‚û°Ô∏è".upper()},
            ]

        return output


class ReportsSurplusInput:
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "register_surplus", "name": "–ó–∞–ø–∏—Å–∞—Ç—å"},
            {"id": "get_surplus", "name": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å"},
        ]

        return output


class ReportsZReport2Input:
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session):
        if session.employee.role == "CASHIER":
            output = [
                {"id": "z_report", "name": "–ó–∞–ø–æ–ª–Ω–∏—Ç—å Z –û—Ç—á–µ—Ç üßæ".upper()},
                {"id": "z_photo", "name": "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ üì∑".upper()},
            ]

        else:
            output = [
                {"id": "z_report", "name": "Z –û—Ç—á–µ—Ç üßæ".upper()},
                {"id": "z_photo", "name": "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ üì∑".upper()},
                {"id": "get_z_report", "name": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç—ã üëÄ".upper()},
            ]

        return output


class ReportsAcceptInput:
    """
    –ü—Ä–∏–µ–º–∫–∞ –∏–ª–∏ –°–ø–∏—Å–∞–Ω–∏–µ
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = [
            {"id": "get_accept", "name": "–ü—Ä–∏–µ–º–∫–∞"},
            {"id": "get_write_off", "name": "–°–ø–∏—Å–∞–Ω–∏–µ"},
        ]

        return output


#
class ReportSalesInput:
    """
    –û—Ç—á–µ—Ç—ã  –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = (
            {
                "id": "get_sales_by_day_of_the_week",
                "name": " üõíüìÖ –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥... ‚û°Ô∏è".upper(),
            },
            {
                "id": "get_sales_by_shop_product_group_unit",
                "name": "üõí –ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –≤ —à—Ç  ‚û°Ô∏è".upper(),
            },
            {
                "id": "get_sales_by_shop_product_group_rub",
                "name": "üõí –ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –≤ ‚ÇΩ  ‚û°Ô∏è".upper(),
            },
            # {"id": 'get_sales_by_employees',
            #  "name": "üõíüë±üë±‚Äç–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –ø—Ä–æ–¥–∞–≤—Ü–∞–º ‚û°Ô∏è".upper()},
        )

        return output


class ReportDataAnalysisInput:
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "analysis_sales_shops", "name": "–ü–†–û–î. –ü–û –ú–ê–ì–ê–ó–ò–ù–ê–ú üìàüìä"},
            {
                "id": "analysis_sales_by_day_the_week",
                "name": "–°–†–û–í. –ü–†–û–î. ‚ÇΩ –ü–û –î–ï–ù–Ø–ú –ù–ï–î–ï–õ–ò ",
            },
            {
                "id": "analysis_sales_by_day",
                "name": "–ü–†–û–î. –ó–ê –î–ï–ù–¨ –ù–ï–î–ï–õ–ò",
            },
            {"id": "analysis_outcome_shops", "name": "–í–ê–ó–í–†–ê–¢–´ –ü–û –ú–ê–ì–ê–ó–ò–ù–ê–ú üìâÔøΩüìä"},
            {"id": "analysis_sales_shops_group", "name": "–ü–†–û–î–ê–ñ–ò –ü–û –ì–†–£–ü–ü–ï üìâÔøΩüìä"},
            {"id": "analysis_sales_shops_groups", "name": "–ü–†–û–î–ê–ñ–ò –ü–û –ì–†–£–ü–ü–ê–ú üìâÔøΩüìä"},
        )
        return output


class ReportsZInput:
    """
    –ö–∞—Å—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        users_id = [490899906, 475039971]
        if session.user_id in users_id:
            return (
                {"id": "detailed_report", "name": "üßæ Z_–û—Ç—á–µ—Ç—ã ‚û°Ô∏è".upper()},
                {"id": "report_cash_outcome", "name": "üßæ–û—Ç—á–µ—Ç –ø–æ –≤—ã–ø–ª–∞—Ç–∞–º ‚û°Ô∏è".upper()},
                {"id": "report_cash_income", "name": "üßæ–û—Ç—á–µ—Ç –ø–æ –≤–Ω–µ—Å–µ–Ω–∏—è–º  ‚û°Ô∏è".upper()},
                {"id": "get_check", "name": "üßæ–ó–∞–ø—Ä–æ—Å —á–µ–∫–∞ ‚û°Ô∏è".upper()},
                # {"id": "surplus", "name": "üßæ–ò–ó–õ–ò–®–ö–ò –í –ö–ê–°–°–ï ‚û°Ô∏è".upper()},
                {"id": "monthly_result", "name": "üíπ –ò—Ç–æ–≥ –º–µ—Å—è—Ü–∞ ‚û°Ô∏è".upper()},
            )
        else:
            return (
                {"id": "detailed_report", "name": "üßæ Z_–û—Ç—á–µ—Ç—ã ‚û°Ô∏è".upper()},
                {"id": "report_cash_outcome", "name": "üßæ–û—Ç—á–µ—Ç –ø–æ –≤—ã–ø–ª–∞—Ç–∞–º ‚û°Ô∏è".upper()},
                {"id": "report_cash_income", "name": "üßæ–û—Ç—á–µ—Ç –ø–æ –≤–Ω–µ—Å–µ–Ω–∏—è–º  ‚û°Ô∏è".upper()},
                {"id": "get_check", "name": "üßæ–ó–∞–ø—Ä–æ—Å —á–µ–∫–∞ ‚û°Ô∏è".upper()},
                {"id": "surplus", "name": "üßæ–ò–ó–õ–ò–®–ö–ò –í –ö–ê–°–°–ï ‚û°Ô∏è".upper()},
            )


class ReportMonthlyResultInput:
    """
    T–æ–≤–∞—Ä–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = (
            {"id": "cashless_payment", "name": "–†–∞—Å—Ö–æ–¥—ã –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç  ‚û°Ô∏è".upper()},
            {"id": "cash_payment", "name": "–†–∞—Å—Ö–æ–¥—ã –Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç ‚û°Ô∏è".upper()},
            {"id": "gross_profit", "name": "–í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å  ‚û°Ô∏è".upper()},
            {"id": "profit_request", "name": "–ü—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü ‚û°Ô∏è".upper()},
        )

        return output


class ReportCommodityInput:
    """
    T–æ–≤–∞—Ä–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = (
            {"id": "get_commodity_balances", "name": "‚Ñ¢Ô∏è –¢–æ–≤–∞—Ä–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏  ‚û°Ô∏è".upper()},
            {"id": "order_constructor", "name": "üßÆ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–∫–∞–∑–∞  ‚û°Ô∏è".upper()},
            {"id": "get_accept", "name": "üöö –ü—Ä–∏–µ–º–∫–∞/–°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞  ‚û°Ô∏è".upper()},
            {
                "id": "get_product_not_for_sale",
                "name": "üõë–¢–æ–≤–∞—Ä –±–µ–∑ –¥–≤–∏–∂–∏–Ω–∏—è(–ø—Ä–æ–¥–∞–∂) ‚û°Ô∏è".upper(),
            },
            {"id": "marriage", "name": "–ë—Ä–∞–∫ –Ω–∞—Ç –¢–¢ üö≠‚ö†Ô∏è‚û°Ô∏è".upper()},
        )

        return output


class ReportSalaryInput:
    """
    –û—Ç—á–µ—Ç—ã  –ø–æ –ó–ü
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        if session.employee.role == "CASHIER":
            output = (
                {"id": "get_salary_aks", "name": "–ó–ü –ø–æ –≥—Ä—É–ø. –∞–∫—Å. ‚û°Ô∏è".upper()},
                {
                    "id": "get_salary_motivation_uuid",
                    "name": "–ó–ü –∑–∞ –º–æ—Ç–∏–≤. —Ç–æ–≤–∞—Ä ‚û°Ô∏è".upper(),
                },
                {
                    "id": "get_salary_total",
                    "name": "–ó–ü –ü–û –ü–†–û–î–ê–í–¶–ê–ú",
                },
                {
                    "id": "get_salary_total_day",
                    "name": "–ó–ü –ó–ê –î–ï–ù–¨",
                },
                # {
                #     "id": "get_salary_day",
                #     "name": "üíπ –ó–ü –∞–∫—Å—Å—ã all ‚û°Ô∏è",
                # },
                {
                    "id": "get_salary_plan_day",
                    "name": "üíπ –ó–ü –ü–ª–∞–Ω –ø–æ –≠–ª–µ–∫—Ç—Ä–æ ‚û°Ô∏è",
                },
            )
        if session.employee.role == "ADMIN":
            output = (
                {"id": "setting", "name": "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ‚û°Ô∏è".upper()},
                {"id": "get_salary_aks", "name": "–ó–ü –ø–æ –≥—Ä—É–ø. –∞–∫—Å. ‚û°Ô∏è".upper()},
                {
                    "id": "get_salary_motivation_uuid",
                    "name": "–ó–ü –∑–∞ –º–æ—Ç–∏–≤. —Ç–æ–≤–∞—Ä ‚û°Ô∏è".upper(),
                },
                {
                    "id": "get_salary_total",
                    "name": "–ó–ü –ü–û –ü–†–û–î–ê–í–¶–ê–ú",
                },
                {
                    "id": "get_salary_total_day",
                    "name": "–ó–ü –ó–ê –î–ï–ù–¨",
                },
                {
                    "id": "get_salary_plan_day",
                    "name": "üíπ –ó–ü –ü–ª–∞–Ω –ø–æ –≠–ª–µ–∫—Ç—Ä–æ ‚û°Ô∏è",
                },
                {
                    "id": "get_salary_day",
                    "name": "üíπ –ó–ü –∞–∫—Å—Å—ã all ‚û°Ô∏è",
                },
            )

        return output


class ReportsSalarySettingInput:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ó–ü
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "group_uuid_accessory", "name": "–ì—Ä—É–ø–ø –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ ‚û°Ô∏è".upper()},
            {
                "id": "motivation_uuid_accessory",
                "name": "–¢–æ–≤–∞—Ä –¥–æ–±. –º–æ—Ç–∏–≤–∞—Ü–∏–∏ ‚û°Ô∏è".upper(),
            },
            {"id": "assigning_salary", "name": "–û–∫–ª–∞–¥—ã –Ω–∞ –¢–¢ ‚Ç±‚û°Ô∏è".upper()},
            {"id": "motivation", "name": "–ú–æ—Ç–∏–≤. –∑–∞ –≤—ã–ø. –ø–ª–∞–Ω–∞  ‚Ç± ‚û°Ô∏è".upper()},
            {"id": "surcharge", "name": "–î–æ–ø–ª–∞—Ç–∞ –∫ –∑–ø ‚Ç± ‚û°Ô∏è".upper()},
        )
        return output


class ReportGroupUuidAccessoryInput:
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä—É–ø–ø –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {
                "id": "get_group_uuid_accessory",
                "name": "–ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä—É–ø–ø –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ ‚û°Ô∏è".upper(),
            },
            {
                "id": "change_group_uuid_accessory",
                "name": "–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—ã –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ ‚û°Ô∏è".upper(),
            },
            {
                "id": "assigning_group_uuid_accessory",
                "name": "–ù–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—ã –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ ‚û°Ô∏è".upper(),
            },
        )
        return output


class ChangeGroupUuidAccessoryInput:
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        pprint("ChangesGroupUuidAccessoryInput")

        output = (
            {
                "id": "add_group_uuid_accessory",
                "name": "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—ã –∞–∫—Å–µ—Å—Å. ‚û°Ô∏è".upper(),
            },
            {
                "id": "delete_group_uuid_accessory",
                "name": "–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É(—ã) –∞–∫—Å–µ—Å—Å. ‚û°Ô∏è".upper(),
            },
        )
        return output


class ReportMotivationInput:
    """
    –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—É–º–º—É –º–æ—Ç–≤–∏—Ü–∏–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {
                "id": "amount_of_motivation",
                "name": "–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—É–º. –∑–∞ –≤—ã–ø–æ–ª. –ø–ª. ‚Ç±‚û°Ô∏è".upper(),
            },
            {
                "id": "get_amount_of_motivation",
                "name": "–°—É–º–º–∞ –∑–∞ –≤—ã–ø–æ–ª. –ø–ª. ‚Ç± ‚û°Ô∏è".upper(),
            },
        )
        return output


class ReportMotivationUuidInput:
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        # pprint("product_ext_motivation")
        output = (
            {
                "id": "product_ext_motivation",
                "name": "–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–æ–ø. –º–æ—Ç–∏–≤–∞—Ü–∏–∏ ‚û°Ô∏è".upper(),
            },
            {
                "id": "get_product_ext_motivation",
                "name": "–¢–æ–≤–∞—Ä –¥–æ–±. –º–æ—Ç–∏–≤–∞—Ü–∏–∏  ‚û°Ô∏è".upper(),
            },
        )
        return output


class Report–êssignSalaryInput:
    """
    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–∫–ª–∞–¥–æ–≤ –Ω–∞ –¢–¢
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "assigning_salary_", "name": "–ù–∞–∑–Ω–∞—á–∏—Ç—å –æ–∫–ª–∞–¥ –Ω–∞ –¢–¢ ‚Ç±‚û°Ô∏è".upper()},
            {"id": "get_salary", "name": "–û–∫–ª–∞–¥—ã –Ω–∞ –¢–¢‚Ç± ‚û°Ô∏è".upper()},
        )
        return output


class ReportMotivationInput:
    """
    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—É–º. –∑–∞ –≤—ã–ø–æ–ª. –ø–ª–∞–Ω–∞
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {
                "id": "amount_of_motivation",
                "name": "–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—É–º. –∑–∞ –≤—ã–ø–æ–ª. –ø–ª. ‚Ç±‚û°Ô∏è".upper(),
            },
            {
                "id": "get_amount_of_motivation",
                "name": "–°—É–º–º–∞ –∑–∞ –≤—ã–ø–æ–ª. –ø–ª. ‚Ç± ‚û°Ô∏è".upper(),
            },
        )
        return output


class ReportSurchargeInput:
    """
    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—É–º. –¥–æ–ø–ª–∞—Ç—É –∫ –∑–ø.
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "assign_a_surcharge", "name": "–ù–∞–∑–Ω–∞—á–∏—Ç—å –¥–æ–ø–ª–∞—Ç—É –∫ –∑–ø ‚û°Ô∏è".upper()},
            {"id": "get_surcharge", "name": "–î–æ–ø–ª–∞—Ç–∞ –∫ –∑–ø  ‚û°Ô∏è".upper()},
        )
        return output


class ReportsSettingsInput:
    """
    –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "clean_up_the_database", "name": "–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ‚û°Ô∏è".upper()},
            {"id": "delete_restore_shop", "name": "—É–¥–∞–ª–µ–Ω–∏–µ –¢–¢‚û°Ô∏è".upper()},
            {
                "id": "delete_restore_employees",
                "name": "—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.‚û°Ô∏è".upper(),
            },
            {"id": "plan_generation", "name": "–ì–µ–Ω–∏—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ ‚û°Ô∏è".upper()},
            {"id": "operating_mode", "name": "–†–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –¢–¢ ‚û°Ô∏è".upper()},
            {"id": "openData", "name": "openData ‚û°Ô∏è".upper()},
            {"id": "32Fm", "name": "32Fm ‚û°Ô∏è".upper()},
        )
        return output


class ReportsOperatingModeShopInput:
    """
    –ú–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "operating_shops", "name": " –ù–∞–∑–∞–Ω–∞—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¢–¢ ‚û°Ô∏è".upper()},
            {
                "id": "get_operating_shops",
                "name": "üü¢ –ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º—è–Ω–∏  —Ä–∞–±–æ—Ç—ã –¢–¢ ‚û°Ô∏è".upper(),
            },
        )
        return output


class ReportsDeleteRestoreShopInput:
    """
    –ú–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "delete_shops", "name": "üî¥ —É–¥–∞–ª–∏—Ç—å –¢–¢ ‚û°Ô∏è".upper()},
            {"id": "restore_shops", "name": "üü¢ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¢–¢ ‚û°Ô∏è".upper()},
        )
        return output


class ReportsDeleteRestoreEmployeesInput:
    """ """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "delete_employees", "name": "üî¥ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚û°Ô∏è".upper()},
            {"id": "restore_employees", "name": "üü¢ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚û°Ô∏è".upper()},
        )
        return output


class ReportsClearDbInput:
    """
    –ú–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "clear_db_employees", "name": "üë´ –û—á–∏—Å—Ç–∏—Ç—å (–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏) ‚û°Ô∏è".upper()},
            {"id": "clear_db_shops", "name": "üè™ –û—á–∏—Å—Ç–∏—Ç—å (–ú–∞–≥–∞–∑–∏–Ω—ã) ‚û°Ô∏è".upper()},
            {"id": "clear_db_documents", "name": "üìë –û—á–∏—Å—Ç–∏—Ç—å (–î–æ–∫—É–º–µ–Ω—Ç—ã) ‚û°Ô∏è".upper()},
            {"id": "clear_db_products", "name": "üõí –û—á–∏—Å—Ç–∏—Ç—å (–ü—Ä–æ–¥—É–∫—Ç—ã) ‚û°Ô∏è".upper()},
            {"id": "clear_db_z_report", "name": "üõí –û—á–∏—Å—Ç–∏—Ç—å (z) ‚û°Ô∏è".upper()},
            {"id": "clear_db_sesion", "name": "üõí –û—á–∏—Å—Ç–∏—Ç—å (Session) ‚û°Ô∏è".upper()},
            {"id": "clear_db_get_time", "name": "üõí –û—á–∏—Å—Ç–∏—Ç—å (GetTime) ‚û°Ô∏è".upper()},
            {"id": "clear_db_surplus", "name": "üõí –û—á–∏—Å—Ç–∏—Ç—å (Surplus) ‚û°Ô∏è".upper()},
            {"id": "clear_db_plan", "name": "üõí –û—á–∏—Å—Ç–∏—Ç—å (Plan) ‚û°Ô∏è".upper()},
            {
                "id": "clear_db_group_uuid_aks",
                "name": "üõí –û—á–∏—Å—Ç–∏—Ç—å (GroupUuidAks) ‚û°Ô∏è",
            },
            {"id": "clear_db_status", "name": "üõí –û—á–∏—Å—Ç–∏—Ç—å (Status) ‚û°Ô∏è".upper()},
        )
        return output


class FmSettingsInput:
    """
    –ú–µ–Ω—é fm
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "download_data", "name": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ FM ‚û°Ô∏è".upper()},
            {"id": "get_seles", "name": "–ü—Ä–æ–¥–∞–∂–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ FM ‚û°Ô∏è".upper()},
            {
                "id": "stock_balances",
                "name": "get stock balances ‚û°Ô∏è".upper(),
            },
        )


class ShopAllInput:
    """
    –ú–∞–≥–∞–∑–∏–Ω—ã –∏ –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã
    """

    # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –æ–ø—Ü–∏–µ–π "–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã"
        output = [{"id": "all", "name": "–í–°–ï –ú–ê–ì–ê–ó–ò–ù–´ ‚û°Ô∏è"}]

        # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π
        output.extend(
            {"id": item["uuid"], "name": "{} ‚û°Ô∏è".format(item["name"]).upper()}
            for item in get_shops_user_id(session)
        )

        return output


class ShopAllInInput:
    """
    –ú–∞–≥–∞–∑–∏–Ω—ã –∏ –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = [
            {"id": "all", "name": "{} ‚û°Ô∏è".format("–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã").upper()},
            {
                "id": "20220202-B042-4021-803D-09E15DADE8A4",
                "name": "{} ‚û°Ô∏è".format("–ë–∞–≥—Ä–∞—Ç–∏–æ–Ω–∞").upper(),
            },
            {
                "id": "20220201-19C9-40B0-8082-DF8A9067705D",
                "name": "{} ‚û°Ô∏è".format("–°–∫–∞–ª–∞").upper(),
            },
        ]

        return output


class ShopInput:
    """
    –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞

    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = []

        uuid = []
        # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
        for i in range(int(session["room"]) + 1):
            # –µ—Å–ª–∏ –≤ 'uuid' –µ—Å—Ç—å –≤ session.params["inputs"][str(i)]
            if "shop" in session.params["inputs"][str(i)]:
                # –µ—Å–ª–∏ 'uuid' –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∫–ª—é—á–µ–º i –≤ —Å–ø–∏—Å–∫–µ uuid
                if session.params["inputs"][str(i)]["shop"] not in uuid:
                    # –¥–æ–±–æ–≤–ª—è–µ—Ç 'uuid' –≤ —Å–ø–∏—Å–æ–∫ uuid
                    uuid.append(session.params["inputs"][str(i)]["shop"])

        for item in get_shops_user_id(session):
            if item["uuid"] not in uuid:
                output.append(
                    {"id": item["uuid"], "name": "{} ‚û°Ô∏è".format(item["name"]).upper()}
                )

        return output


class EmployeesInput:
    """
    –í—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
    """

    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞".upper()

    type = "SELECT"

    def get_options(self, session: Session):
        output = []
        # employees = Employees.objects(stores__in=session.employee.stores)
        # for i in employees:
        #     print(i['name'])

        room = session["room"]
        # pprint(room)
        uuid = []
        # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
        for i in range(int(room) + 1):

            # –µ—Å–ª–∏ –≤ 'uuid' –µ—Å—Ç—å –≤ session.params["inputs"][str(i)]
            if "uuid" in session.params["inputs"][str(i)]:
                # –µ—Å–ª–∏ 'uuid' –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∫–ª—é—á–µ–º i –≤ —Å–ø–∏—Å–∫–µ uuid
                if session.params["inputs"][str(i)]["uuid"] not in uuid:

                    # –¥–æ–±–æ–≤–ª—è–µ—Ç 'uuid' –≤ —Å–ø–∏—Å–æ–∫ uuid
                    uuid.append(session.params["inputs"][str(i)]["uuid"])
        shop_id = get_shops_uuid_user_id(session)
        employees = Employees.objects(stores__in=shop_id)

        uuids = []
        for item in employees:
            if item["lastName"] not in uuid:
                if item["lastName"] not in uuids:
                    output.append({"id": item["lastName"], "name": item["name"]})
                    uuids.append(item["lastName"])

        return output


class EmployeesUuidInput:
    """
    –í—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
    """

    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞".upper()

    type = "SELECT"

    def get_options(self, session: Session):
        output = []
        # employees = Employees.objects(stores__in=session.employee.stores)
        # for i in employees:
        #     print(i['name'])

        room = session["room"]
        # pprint(room)
        uuid = []
        # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
        for i in range(int(room) + 1):
            # –µ—Å–ª–∏ –≤ 'uuid' –µ—Å—Ç—å –≤ session.params["inputs"][str(i)]
            if "uuid" in session.params["inputs"][str(i)]:
                # –µ—Å–ª–∏ 'uuid' –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∫–ª—é—á–µ–º i –≤ —Å–ø–∏—Å–∫–µ uuid
                if session.params["inputs"][str(i)]["uuid"] not in uuid:

                    # –¥–æ–±–æ–≤–ª—è–µ—Ç 'uuid' –≤ —Å–ø–∏—Å–æ–∫ uuid
                    uuid.append(session.params["inputs"][str(i)]["uuid"])
        shop_id = get_shops_uuid_user_id(session)
        employees = Employees.objects(stores__in=shop_id)

        uuids = []
        for item in employees:
            if item["uuid"] not in uuid:
                if item["uuid"] not in uuids:
                    output.append({"id": item["uuid"], "name": item["name"]})
                    uuids.append(item["uuid"])

        return output


class GroupInput:
    """
    –ì—Ä—É–ø–ø—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    """

    name = "–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ üìã".upper()
    type = "SELECT"

    def get_options(self, session: Session) -> list:

        output = [{"id": "all", "name": "{} ‚û°Ô∏è".format("–í—Å–µ –≥—Ä—É–ø–ø—ã").upper()}]

        for k, v in get_group(session).items():
            output.append({"id": k, "name": "{} ‚û°Ô∏è".format(v)})

        return output


class GroupsInput:
    # pprint("GroupsInput")
    """
    –ì—Ä—É–ø–ø—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    """
    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É(—ã)".upper()

    type = "SELECT"

    def get_options(self, session: Session):
        output = []

        shop_id = get_shops_uuid_user_id(session)

        room = session["room"]
        uuid = []
        # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
        for i in range(int(session["room"]) + 1):
            # –µ—Å–ª–∏ –≤ 'uuid' –µ—Å—Ç—å –≤ session.params["inputs"][str(i)]
            if "parentUuid" in session.params["inputs"][str(i)]:
                # –µ—Å–ª–∏ 'uuid' –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∫–ª—é—á–µ–º i –≤ —Å–ø–∏—Å–∫–µ uuid
                if session.params["inputs"][str(i)]["parentUuid"] not in uuid:
                    # –¥–æ–±–æ–≤–ª—è–µ—Ç 'uuid' –≤ —Å–ø–∏—Å–æ–∫ uuid
                    uuid.append(session.params["inputs"][str(i)]["parentUuid"])
        uuids = []
        for item in get_products_shops(session, shop_id):
            if item["uuid"] not in uuid:
                if item["uuid"] not in uuids:
                    output.append({"id": item["uuid"], "name": item["name"]})
                    uuids.append(item["uuid"])

        return output


class GroupsDeleteInput:
    try:
        # pprint("GroupsDelitInput")
        """
        –ì—Ä—É–ø–ø—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        """
        name = "–ú–∞–≥–∞–∑–∏–Ω"
        desc = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É(—ã)".upper()

        type = "SELECT"

        def get_options(self, session: Session):
            output = []

            shop_id = get_shops_uuid_user_id(session)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –≥—Ä—É–ø–ø–æ–≤—ã–º UUID —Å —Ç–∏–ø–æ–º "MOTIVATION_PARENT_UUID"
            documents = (
                GroupUuidAks.objects(
                    shop_id=shop_id[0], x_type="MOTIVATION_PARENT_UUID"
                )
                .order_by("-closeDate")
                .first()
            )

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ parentUuid
            products = Products.objects(group=True, uuid__in=documents.parentUuids)

            room = session["room"]
            uuid = []
            # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
            for i in range(int(session["room"]) + 1):
                # –µ—Å–ª–∏ –≤ 'uuid' –µ—Å—Ç—å –≤ session.params["inputs"][str(i)]
                if "parentUuid" in session.params["inputs"][str(i)]:
                    # –µ—Å–ª–∏ 'uuid' –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∫–ª—é—á–µ–º i –≤ —Å–ø–∏—Å–∫–µ uuid
                    if session.params["inputs"][str(i)]["parentUuid"] not in uuid:
                        # –¥–æ–±–æ–≤–ª—è–µ—Ç 'uuid' –≤ —Å–ø–∏—Å–æ–∫ uuid
                        uuid.append(session.params["inputs"][str(i)]["parentUuid"])
            uuids = []
            for item in products:
                if item["uuid"] not in uuid:
                    if item["uuid"] not in uuids:
                        output.append({"id": item["uuid"], "name": item["name"]})
                        uuids.append(item["uuid"])

            return output

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e} –Ω–∞ —Å—Ç—Ä–æ–∫–µ {sys.exc_info()[-1].tb_lineno}")


class ProductsInput:
    """
    –ü—Ä–æ–¥—É–∫—Ç—ã
    """

    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = []

        shop_id = get_shops_uuid_user_id(session)

        parentUuid = session.params["inputs"]["0"]["Uuid"]

        products = Products.objects(
            __raw__={
                "shop_id": {"$in": shop_id},
                # 'group': True,
                "parentUuid": parentUuid,
            }
        )

        for item in products:
            s = str(item["name"]).split(" ")

            output.append(
                {
                    "id": item["uuid"],
                    "name": " ".join(s[0:4]),
                    # 'name': item['name']
                }
            )
        return output


class ProductInput:
    """
    –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    """

    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
    type = "SELECT"

    def get_options(self, session: Session):
        output = []
        # shops = Shop.objects(uuid__in=session.employee.stores)

        shop_id = get_shops_uuid_user_id(session)
        pprint(shop_id)

        room = session["room"]
        # pprint(room)
        uuid = []
        # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
        for i in range(int(session["room"]) + 1):
            # –µ—Å–ª–∏ –≤ 'uuid' –µ—Å—Ç—å –≤ session.params["inputs"][str(i)]
            if "uuid" in session.params["inputs"][str(i)]:
                # –µ—Å–ª–∏ 'uuid' –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∫–ª—é—á–µ–º i –≤ —Å–ø–∏—Å–∫–µ uuid
                if session.params["inputs"][str(i)]["uuid"] not in uuid:
                    # –¥–æ–±–æ–≤–ª—è–µ—Ç 'uuid' –≤ —Å–ø–∏—Å–æ–∫ uuid
                    uuid.append(session.params["inputs"][str(i)]["uuid"])
        product = Products.objects(
            shop_id__in=shop_id,
            group__exact=False,
            parentUuid=session.params["inputs"]["0"]["parentUuid"],
        )
        pprint(product)
        uuids = []
        for item in product:
            # pprint(session.params['inputs'].values())
            if item["uuid"] not in uuid:
                if item["uuid"] not in uuids:
                    s = str(item["name"]).split(" ")

                    output.append(
                        {
                            "id": item["uuid"],
                            "name": " ".join(s[0:3]),
                            # 'name': item['name']
                        }
                    )
                    uuids.append(item["uuid"])
        # return output
        #             output.append({"id": item["uuid"], "name": item["name"]})

        return output


class ProductElectroInput:
    name = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞‚Ñ¢Ô∏è‚û°Ô∏è".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = []
        shops_id = session.params["inputs"]["0"]["shop"]
        # pprint(shops_id)
        group_id = (
            "78ddfd78-dc52-11e8-b970-ccb0da458b5a",
            "bc9e7e4c-fdac-11ea-aaf2-2cf05d04be1d",
            "0627db0b-4e39-11ec-ab27-2cf05d04be1d",
            "2b8eb6b4-92ea-11ee-ab93-2cf05d04be1d",
            "8a8fcb5f-9582-11ee-ab93-2cf05d04be1d",
            "97d6fa81-84b1-11ea-b9bb-70c94e4ebe6a",
            "ad8afa41-737d-11ea-b9b9-70c94e4ebe6a",
            "568905bd-9460-11ee-9ef4-be8fe126e7b9",
            "568905be-9460-11ee-9ef4-be8fe126e7b9",
        )
        product = Products.objects(
            __raw__={"shop_id": shops_id, "parentUuid": {"$in": group_id}}
        )
        for item in product:
            # pprint(item['quantity'])
            # pprint(item['uuid'])
            # pprint(item['name'])
            if item["quantity"]:
                s = str(item["name"]).split(" ")

                # pprint(s)
                # pprint(' '.join(s[1:4]))
                output.append({"id": item["uuid"], "name": " ".join(s[0:4])})

        return output


class ProductsSaleInput:
    """
    –ü—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
    """

    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç".upper()
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = []

        shops = get_shops(session)
        shop_id = shops["shop_id"]

        parentUuid = session.params["inputs"]["0"]["group"]

        period = get_period_day(session)

        since = period["since"]
        until = period["until"]

        if parentUuid == "all":
            products = Products.objects(
                __raw__={
                    "shop_id": {"$in": shop_id},
                }
            )
        else:
            products = Products.objects(
                __raw__={"shop_id": {"$in": shop_id}, "parentUuid": parentUuid}
            )
        products_uuid = [element.uuid for element in products]

        documents = Documents.objects(
            __raw__={
                "closeDate": {"$gte": since, "$lt": until},
                "shop_id": {"$in": shop_id},
                "x_type": "SELL",
                "transactions.commodityUuid": {"$in": products_uuid},
            }
        )
        uuid_ = []
        _dict = {}
        for doc in documents:
            for trans in doc["transactions"]:
                # pprint(trans)
                if trans["x_type"] == "REGISTER_POSITION":
                    if trans["commodityUuid"] not in uuid_:
                        uuid_.append(trans["commodityUuid"])
                    if trans["commodityUuid"] not in _dict:
                        _dict[trans["commodityUuid"]] = trans["quantity"]
                    else:
                        _dict[trans["commodityUuid"]] += trans["quantity"]
        session.params["uuid"] = uuid_
        session.params["uuid_quantity"] = _dict

        uuid = []
        # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
        for i in range(int(session["room"]) + 1):
            # –µ—Å–ª–∏ –≤ 'uuid' –µ—Å—Ç—å –≤ session.params["inputs"][str(i)]
            if "uuid" in session.params["inputs"][str(i)]:
                # –µ—Å–ª–∏ 'uuid' –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∫–ª—é—á–µ–º i –≤ —Å–ø–∏—Å–∫–µ uuid
                if session.params["inputs"][str(i)]["uuid"] not in uuid:
                    # –¥–æ–±–æ–≤–ª—è–µ—Ç 'uuid' –≤ —Å–ø–∏—Å–æ–∫ uuid
                    uuid.append(session.params["inputs"][str(i)]["uuid"])
        # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç –∏–∑ –±–¥ session —Ä–∞–Ω–∏–µ –≤–∞–±—Ä–∞–Ω–Ω—ã 'parentUuid' –≥—Ä—É–ø–ø—ã
        products = Products.objects(
            __raw__={
                "shop_id": {"$in": shop_id},
                # "group": True,
                "parentUuid": parentUuid,
                "uuid": {"$in": uuid_},
            }
        )
        for item in products:
            # –ï—Å–ª–∏ item['uuid'] –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ uuid
            if item["uuid"] not in uuid:
                # –∑–∞–ø–∏—Å—ã–≤–∫–µ—Ç –≤ output {'id': item['uuid'], 'name': item['name']}
                s = str(item["name"]).split(" ")

                # pprint(s)
                # pprint(' '.join(s[1:4]))
                output.append({"id": item["uuid"], "name": " ".join(s[1:4])})
        return output


class DocStatusInput:
    """–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ -
    open –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–æ—Ä,
    completed –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä
    """

    name = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–∂–∏—Ç—å –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–∂–∏—Ç—å –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "open", "name": "–ü—Ä–æ–¥–æ–∂–∏—Ç—å".upper()},
            {"id": "completed", "name": "–ó–∞–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç".upper()},
        )
        return output


class PeriodDateInput:
    """
    –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã
    """

    name = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ üìÖ".upper()
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ üìÖ".upper()
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = (
            {"id": "day", "name": "üìÜ –î–µ–Ω—å ‚û°Ô∏è".upper()},
            {"id": "week", "name": "üìÜ –ù–µ–¥–µ–ª—è ‚û°Ô∏è".upper()},
            {"id": "fortnight", "name": "üìÜ –î–≤–µ –Ω–µ–¥–µ–ª–∏ ‚û°Ô∏è".upper()},
            {"id": "month", "name": "üìÜ –ú–µ—Å—è—Ü ‚û°Ô∏è".upper()},
            {"id": "two months", "name": "üìÜ –î–≤–∞ –º–µ—Å—è—Ü–∞ ‚û°Ô∏è".upper()},
            {"id": "6 months", "name": "üìÜ 6 –ú–µ—Å—è—Ü–µ–≤ ‚û°Ô∏è".upper()},
            {"id": "12 months", "name": "üìÜ 12 –ú–µ—Å—è—Ü–µ–≤ ‚û°Ô∏è".upper()},
            {"id": "24 months", "name": "üìÜ 24 –ú–µ—Å—è—Ü–µ–≤ ‚û°Ô∏è".upper()},
            {"id": "48 months", "name": "üìÜ 48 –ú–µ—Å—è—Ü–µ–≤ ‚û°Ô∏è".upper()},
        )

        return output


class OpenDateDateMonthInput:
    """
    –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã
    """

    name = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ üìÖ".upper()
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü üìÖ".upper()
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = []
        since = (
            utcnow().to("local").shift(months=-6).replace(hour=3, minute=00).isoformat()
        )
        until = utcnow().to("local").isoformat()

        intervals = get_intervals(since, until, "months", 1)
        for left, right in intervals:
            output.append({"id": left, "name": "{} ‚û°Ô∏è".format(left[0:7])})

        return output

        return output


class OpenDatePastInput:
    """–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞.
    –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞ –¥–∞—Ç—ã –±—É–¥—É—Ç –º–µ—Å—è—Ü–∞–º–∏.
    –ò–Ω–∞—á–µ –¥–Ω—è–º–∏.
    –û—Ç –Ω–∞—á–∞–ª–∞ –¥–∞—Ç—ã –ø–∏—Ä–∏–æ–¥–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–æ –ø–∏—Ä–∏–æ–¥–∞ "
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = []
        since = period_first_day_of_the_month(
            session["params"]["inputs"]["0"]["period"]
        )
        until = utcnow().isoformat()
        period = ["day", "week", "fortnight", "month"]
        if session["params"]["inputs"]["0"]["period"] in period:
            intervals = get_intervals(since, until, "days", 1)
        else:
            intervals = get_intervals(since, until, "months", 1)
        for left, right in intervals:
            output.append({"id": left, "name": "{} ‚û°Ô∏è".format(left[0:10])})

        return output


class OpenDatePast2Input:
    """
    –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–∏—Ä–∏–æ–¥–∞ –ø–æ –¥–Ω—è–º.
    –û—Ç –Ω–∞—á–∞–ª–∞ –¥–∞—Ç—ã –ø–∏—Ä–∏–æ–¥–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–æ –ø–∏—Ä–∏–æ–¥–∞ "
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = []
        since = period_first_day_of_the_month(
            session["params"]["inputs"]["0"]["period"]
        )
        until = utcnow().isoformat()
        intervals = get_intervals(since, until, "days", 1)
        for left, right in intervals:
            output.append({"id": left, "name": "{} ‚û°Ô∏è".format(left[0:10])})

        return output


class OpenDateFutureInput:
    """
    –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–∏—Ä–∏–æ–¥–∞ –ø–æ –¥–Ω—è–º.
    –û—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –¥–æ –∫–æ–Ω—Ü–∞ –¥–∞—Ç—ã –ø–∏—Ä–∏–æ–¥–∞.
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–æ –ø–∏—Ä–∏–æ–¥–∞ "
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = []
        since = utcnow().isoformat()
        until = period_to_date_2(session["params"]["inputs"]["0"]["period"])
        intervals = get_intervals(since, until, "days", 1)
        for left, right in intervals:
            output.append({"id": left, "name": "{} ‚û°Ô∏è".format(left[0:10])})

        return output


class CloseDatePastInput:
    """
    –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∏—Ä–∏–æ–¥–∞ –ø–æ –¥–Ω—è–º.
    –û—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –ø–∏—Ä–∏–æ–¥–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–∏—Ä–∏–æ–¥–∞ "
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = []
        # pprint(session['params']['inputs']['period'])
        since = session["params"]["inputs"]["0"]["openDate"]
        until = utcnow().isoformat()
        intervals = get_intervals(since, until, "days", 1)

        # pprint(intervals)
        for left, right in intervals:
            # pprint(left)
            output.append({"id": left, "name": "{} ‚û°Ô∏è".format(left[0:10])})

        return output


class CloseDateFutureInput:
    """
    –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∏—Ä–∏–æ–¥–∞ –ø–æ –¥–Ω—è–º.
    –û—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –¥–æ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –ø–∏—Ä–∏–æ–¥–∞.
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–∏—Ä–∏–æ–¥–∞ "
    type = "SELECT"

    def get_options(self, session: Session):
        output = []
        # pprint(session['params']['inputs']['period'])
        since = session["params"]["inputs"]["0"]["openDate"]
        until = period_to_date_2(session["params"]["inputs"]["0"]["period"])
        intervals = get_intervals(since, until, "days", 1)

        # pprint(intervals)
        for left, right in intervals:
            # pprint(left)
            output.append({"id": left, "name": "{} ‚û°Ô∏è".format(left[0:10])})

        return output


class TokenEvotorInput:
    """
    Token Telebot
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ–∫–µ–Ω Telebot ‚úçÔ∏è"
    type = "MESSAGE"


class DocumentsAcceptInput:
    """
    –í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–µ–º–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = []
        params = session.params["inputs"]["0"]
        period = get_period(session)

        since = period["since"]
        until = period["until"]

        shops = get_shops_user_id(session)
        shop_id = shops["shop_id"]

        if params["report"] == "get_accept":
            documents = Documents.objects(
                __raw__={
                    "closeDate": {"$gte": since, "$lt": until},
                    "shop_id": {"$in": shop_id},
                    "x_type": "ACCEPT",
                }
            )
        if params["report"] == "get_write_off":
            documents = Documents.objects(
                __raw__={
                    "closeDate": {"$gte": since, "$lt": until},
                    "shop_id": shop_id,
                    "x_type": "WRITE_OFF",
                }
            )
            # pprint(documents)
        for item in documents:
            output.append(
                {
                    "id": item["number"],
                    "name": get(item["closeDate"]).shift(hours=3).isoformat()[0:10],
                }
            )

        return output


class –°ounterpartyInput:
    name = "–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞"
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "sns_", "name": "–°–ù–°"},
            {"id": "don_", "name": "–î–û–ù–°–ö–û–ô-–¢–ê–ë–ê–ö"},
            {"id": "mega_", "name": "–ú–ï–ì–ê–ü–û–õ–ò–°"},
            {"id": "fizzy_", "name": "FIZZY"},
        )

        return output


class AfsInput:
    name = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ".upper()
    desc = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ üó∫".upper()
    type = "LOCATION"

    def get_options(self, session: Session):
        output = [{"name": "—á–µ–∫–∏–Ω"}]

        return output


class Input:
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session):
        if session.employee.role == "ADMIN":
            output = [
                {
                    "id": "process_questionnaires",
                    "name": "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–Ω–∫–µ—Ç—ã üìÑ".upper(),
                },
                {"id": "get_questionnaires", "name": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üëÄ".upper()},
            ]

        else:
            output = [
                {
                    "id": "personal_information üìù",
                    "name": "–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è".upper(),
                },
                {
                    "id": "contact_information",
                    "name": "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìû".upper(),
                },
                {
                    "id": "family_status",
                    "name": "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ üë™".upper(),
                },
                {
                    "id": "relatives_information",
                    "name": "–°–≤–µ–¥–µ–Ω–∏—è –æ –±–ª–∏–∑–∫–∏—Ö —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞—Ö üë®‚Äçüë©‚Äçüëß‚Äçüë¶".upper(),
                },
                {
                    "id": "education",
                    "name": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ üéì".upper(),
                },
                {
                    "id": "references",
                    "name": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª–∏ üó£Ô∏è".upper(),
                },
                {
                    "id": "work_experience",
                    "name": "–¢—Ä—É–¥–æ–≤–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å üíº".upper(),
                },
                {
                    "id": "desired_salary",
                    "name": "–ñ–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã üí∞".upper(),
                },
                {
                    "id": "advantages",
                    "name": "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –í–∞—à–µ–π –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—ã üåü".upper(),
                },
                {
                    "id": "hobbies",
                    "name": "–í–∞—à–∏ —Ö–æ–±–±–∏ üé®".upper(),
                },
                {
                    "id": "additional_information",
                    "name": "–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ —Å–µ–±–µ üìù".upper(),
                },
                {
                    "id": "skills",
                    "name": "–ù–∞–≤—ã–∫–∏ üõ†Ô∏è".upper(),
                },
            ]

        return output


# –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è/ personal information


class FullNameInput:
    """
    –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ ‚úçÔ∏è"
    type = "MESSAGE"


class DateOfBirthInput:
    """
    –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì‚úçÔ∏è"
    type = "MESSAGE"


class CitizenshipInput:
    """
    –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ ‚úçÔ∏è"
    type = "MESSAGE"


class PlaceOfBirthInput:
    """
    –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è ‚úçÔ∏è"
    type = "MESSAGE"


# –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è/ contact information


class ResidenceAddressInput:
    """
    –ê–¥—Ä–µ—Å (–º–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞)
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å (–º–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞) ‚úçÔ∏è"
    type = "MESSAGE"


class RegistrationAddressInput:
    """
    –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ ‚úçÔ∏è"
    type = "MESSAGE"


class PhoneInput:
    """
    –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚úçÔ∏è"
    type = "MESSAGE"


# –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ/family_status


class –°ounterpartyInput:
    name = "–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "single/unmarried", "name": "–ù–µ –∂–µ–Ω–∞—Ç/–Ω–µ –∑–∞–º—É–∂–µ–º"},
            {"id": "married", "name": "–ñ–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º"},
            {"id": "divorced/divorced", "name": "–†–∞–∑–≤–µ–¥–µ–Ω/—Ä–∞–∑–≤–µ–¥–µ–Ω–∞"},
            {"id": "widower/widow", "name": "–í–¥–æ–≤–µ—Ü/–≤–¥–æ–≤–∞"},
        ]

        return output


# –°–≤–µ–¥–µ–Ω–∏—è –æ –±–ª–∏–∑–∫–∏—Ö —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞—Ö


class RelativeWorkInput:
    """
    –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã, –¥–æ–ª–∂–Ω–æ—Å—Ç—å
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã, –¥–æ–ª–∂–Ω–æ—Å—Ç—å ‚úçÔ∏è"
    type = "MESSAGE"


# –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ/education


class StartDateInput:
    """
    –î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì ‚úçÔ∏è"
    type = "MESSAGE"


class EndDateInput:
    """
    –î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì ‚úçÔ∏è"
    type = "MESSAGE"


class InstitutionNameInput:
    """
    –ù–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è ‚úçÔ∏è"
    type = "MESSAGE"


# –ù–∞–≤—ã–∫–∏/skills


class SkillsInput:
    """
    –ù–∞–≤—ã–∫–∏
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ (–ù–∞–≤—ã–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º, –ó–Ω–∞–Ω–∏–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –∏ —Ç–¥.) ‚úçÔ∏è"
    type = "MESSAGE"


# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª–∏/references


class ReferencesInput:
    """
    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –§.–ò.–û. –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—è ‚úçÔ∏è"
    type = "MESSAGE"


# –¢—Ä—É–¥–æ–≤–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å/work_experience


class StartDateWorkInput:
    """
    –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì ‚úçÔ∏è"
    type = "MESSAGE"


class EndDateWorkInput:
    """
    –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì ‚úçÔ∏è"
    type = "MESSAGE"


# class CompanyNameInput:
#     """
#     –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
#     """

#     desc = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ (–Ω–µ—Ç)‚úçÔ∏è"
#     type = "MESSAGE"


class –°ompanyAddressInput:
    """
    –ê–¥—Ä–µ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ (–Ω–µ—Ç) ‚úçÔ∏è"
    type = "MESSAGE"


class PositionInput:
    """
    –î–æ–ª–∂–Ω–æ—Å—Ç—å
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å ‚úçÔ∏è"
    type = "MESSAGE"


class WorkStartDateInput:
    """
    –î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì ‚úçÔ∏è"
    type = "MESSAGE"


class WorkEndDateInput:
    """
    –î–∞—Ç–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì ‚úçÔ∏è"
    type = "MESSAGE"


class ReasonForLeavingInput:
    """
    –ü—Ä–∏—á–∏–Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —É–≤–æ–ª—å–Ω–µ–Ω–∏—è ‚úçÔ∏è"
    type = "MESSAGE"


# –ñ–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã/desired_salary


# class DesiredSalaryInput:
#     """
#     –ñ–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã
#     """

#     desc = "–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã ‚úçÔ∏è"
#     type = "MESSAGE"


# –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –í–∞—à–µ–π –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—ã/advantages


# –í–∞—à–∏ —Ö–æ–±–±–∏/hobbies


class HobbiesInput:
    """
    –í–∞—à–∏ —Ö–æ–±–±–∏
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ö–æ–±–±–∏ ‚úçÔ∏è"
    type = "MESSAGE"


# –ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ —Å–µ–±–µ/ additional_information


class AdditionalInformationInput:
    """
    –ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ —Å–µ–±–µ
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ —Å–µ–±–µ ‚úçÔ∏è"
    type = "MESSAGE"


class CloseRelativesInput:
    name = "–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "mother", "name": "–ú–∞—Ç—å üë©‚Äçüëß"},
            {"id": "father", "name": "–û—Ç–µ—Ü üë®‚Äçüëß"},
            {"id": "brother", "name": "–ë—Ä–∞—Ç üë¶"},
            {"id": "sister", "name": "–°–µ—Å—Ç—Ä–∞ üëß"},
            {"id": "son", "name": "–°—ã–Ω üë¶"},
            {"id": "daughter", "name": "–î–æ—á—å üë¶"},
        ]

        return output


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è/more_info


class SkillsInput:
    name = "skills"
    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ù–∞–≤—ã–∫–∏ üõ†Ô∏è".upper()
    type = "MESSAGE"


class AdvantagesInput:
    name = "advantages"
    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –í–∞—à–µ–π –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—ã üåü".upper()
    type = "MESSAGE"


class HobbiesInput:
    name = "hobbies"
    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ö–æ–±–±–∏ üé®".upper()
    type = "MESSAGE"


class DesiredSalaryInput:
    name = "desired_salary"
    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ñ–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã üí∞".upper()
    type = "MESSAGE"


#  –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ/education


class EducationInput:
    """–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"""

    name = "education"
    desc = "üéì –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "primary", "name": "–ù–∞—á–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ üè´"},
            {"id": "secondary", "name": "–°—Ä–µ–¥–Ω–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ üéì"},
            {"id": "higher", "name": "–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ üéì"},
            {"id": "vocational", "name": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ üè´"},
            {"id": "postgraduate", "name": "–ü–æ—Å–ª–µ–≤—É–∑–æ–≤—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ üéì"},
            {"id": "other", "name": "–î—Ä—É–≥–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ üìö"},
        )
        return output


class EducationStartDateInput:
    """
    –î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì ‚úçÔ∏è"
    type = "MESSAGE"


class EducationEndDateInput:
    """
    –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì ‚úçÔ∏è"
    type = "MESSAGE"


class SpecializationInput:
    """
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é ‚úçÔ∏è"
    type = "MESSAGE"


class EducationInstitutionNameInput:
    """
    –ù–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è ‚úçÔ∏è"
    type = "MESSAGE"


class QuestionnaireInput:
    "–ê–Ω–∫–µ—Ç—ã"

    name = "education"
    desc = "–ê–Ω–∫–µ—Ç—ã".upper()
    type = "SELECT"

    def get_options(self, session: Session):

        output = []

        documents = –°onsent.objects()
        for doc in documents:
            output.append({"id": doc["user_id"], "name": doc["full_name"]})

        return output

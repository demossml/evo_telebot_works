from bd.model import Shop, Products, Documents, Session, Employees
from .util import (
    get_intervals,
    period_to_date,
    get_shops_user_id,
    get_group,
    get_period_day,
    period_to_date_2,
    get_period,
    get_products,
    get_shops_uuid_user_id,
    get_products_shops,
    get_shops,
    period_first_day_of_the_month,
)


from arrow import utcnow, get
from pprint import pprint


class ReportsMarriageInput:
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "marriage_registration", "name": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—Ä–∞–∫–∞üö≠‚ö†Ô∏è‚û°Ô∏è".upper()},
            {"id": "get_marriage", "name": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—Ä–∞–∫ –Ω–∞—Ç –¢–¢üö≠‚ö†Ô∏è‚û°Ô∏è".upper()},
        ]

        return output


class ReportsShiftOpeningInput:
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session):
        if session.employee.role == "CASHIER":
            output = [
                {"id": "shift_opening_report", "name": "–û—Ç–∫—Ä—ã—Ç–∏–µ –¢–¢ ‚û°Ô∏è".upper()},
            ]
        else:
            output = [
                {"id": "shift_opening_report", "name": "–û—Ç–∫—Ä—ã—Ç–∏–µ –¢–¢ ‚û°Ô∏è".upper()},
                {
                    "id": "get_shift_opening_report",
                    "name": "‚åõ üí∞ üì∑ –û–¢–ß–ï–¢–´ –û–ë –û–¢–ö–†–´–¢–ò–ò –¢–¢ ‚û°Ô∏è ",
                },
                {"id": "get_schedules", "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º—è/—á–∏–∫–∏–Ω–∞ üïí ‚û°Ô∏è".upper()},
                {"id": "get_break", "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º—è/–ø–µ—Ä–µ—Ä—ã–≤–∞ üïí ‚û°Ô∏è".upper()},
            ]

        return output


class ReportsSurplusInput:
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "register_surplus", "name": "–ó–∞–ø–∏—Å–∞—Ç—å"},
            {"id": "get_surplus", "name": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å"},
        ]

        return output


class ReportsZReport2Input:
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session):
        if session.employee.role == "CASHIER":
            output = [
                {"id": "z_report", "name": "–ó–∞–ø–æ–ª–Ω–∏—Ç—å Z –û—Ç—á–µ—Ç üßæ".upper()},
                {"id": "z_photo", "name": "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ üì∑".upper()},
            ]
        else:
            output = [
                {"id": "z_report", "name": "Z –û—Ç—á–µ—Ç üßæ".upper()},
                {"id": "z_photo", "name": "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ üì∑".upper()},
                {"id": "get_z_report", "name": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç—ã üëÄ".upper()},
            ]

        return output


class ReportsAcceptInput:
    """
    –ü—Ä–∏–µ–º–∫–∞ –∏–ª–∏ –°–ø–∏—Å–∞–Ω–∏–µ
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = [
            {"id": "get_accept", "name": "–ü—Ä–∏–µ–º–∫–∞"},
            {"id": "get_write_off", "name": "–°–ø–∏—Å–∞–Ω–∏–µ"},
        ]

        return output


#
class ReportSalesInput:
    """
    –û—Ç—á–µ—Ç—ã  –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = [
            {
                "id": "get_sales_by_day_of_the_week",
                "name": " üõíüìÖ –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥... ‚û°Ô∏è".upper(),
            },
            {
                "id": "get_sales_by_shop_product_group_unit",
                "name": "üõí –ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –≤ —à—Ç  ‚û°Ô∏è".upper(),
            },
            {
                "id": "get_sales_by_shop_product_group_rub",
                "name": "üõí –ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –≤ ‚ÇΩ  ‚û°Ô∏è".upper(),
            },
            # {"id": 'get_sales_by_employees',
            #  "name": "üõíüë±üë±‚Äç–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –ø—Ä–æ–¥–∞–≤—Ü–∞–º ‚û°Ô∏è".upper()},
        ]

        return output


class ReportDataAnalysisInput:
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "analysis_sales_shops", "name": "–ü–†–û–î. –ü–û –ú–ê–ì–ê–ó–ò–ù–ê–ú üìàüìä"},
            {
                "id": "analysis_sales_by_day_the_week",
                "name": "–°–†–û–í. –ü–†–û–î. ‚ÇΩ –ü–û –î–ï–ù–Ø–ú –ù–ï–î–ï–õ–ò ",
            },
            {
                "id": "analysis_sales_by_day",
                "name": "–ü–†–û–î. –ó–ê –î–ï–ù–¨ –ù–ï–î–ï–õ–ò",
            },
            {"id": "analysis_outcome_shops", "name": "–í–ê–ó–í–†–ê–¢–´ –ü–û –ú–ê–ì–ê–ó–ò–ù–ê–ú üìâÔøΩüìä"},
            {"id": "analysis_sales_shops_group", "name": "–ü–†–û–î–ê–ñ–ò –ü–û –ì–†–£–ü–ü–ï üìâÔøΩüìä"},
            {"id": "analysis_sales_shops_groups", "name": "–ü–†–û–î–ê–ñ–ò –ü–û –ì–†–£–ü–ü–ê–ú üìâÔøΩüìä"},
        ]
        return output


class ReportsZInput:

    """
    –ö–∞—Å—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        return [
            {"id": "detailed_report", "name": "üßæ Z_–û—Ç—á–µ—Ç—ã ‚û°Ô∏è".upper()},
            {"id": "report_cash_outcome", "name": "üßæ–û—Ç—á–µ—Ç –ø–æ –≤—ã–ø–ª–∞—Ç–∞–º ‚û°Ô∏è".upper()},
            {"id": "report_cash_income", "name": "üßæ–û—Ç—á–µ—Ç –ø–æ –≤–Ω–µ—Å–µ–Ω–∏—è–º  ‚û°Ô∏è".upper()},
            {"id": "get_check", "name": "üßæ–ó–∞–ø—Ä–æ—Å —á–µ–∫–∞ ‚û°Ô∏è".upper()},
            {"id": "surplus", "name": "üßæ–ò–ó–õ–ò–®–ö–ò –í –ö–ê–°–°–ï ‚û°Ô∏è".upper()},
        ]


class ReportCommodityInput:
    """
    T–æ–≤–∞—Ä–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = [
            {"id": "get_commodity_balances", "name": "‚Ñ¢Ô∏è –¢–æ–≤–∞—Ä–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏  ‚û°Ô∏è".upper()},
            {"id": "order_constructor", "name": "üßÆ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–∫–∞–∑–∞  ‚û°Ô∏è".upper()},
            {"id": "get_accept", "name": "üöö –ü—Ä–∏–µ–º–∫–∞/–°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞  ‚û°Ô∏è".upper()},
            {
                "id": "get_product_not_for_sale",
                "name": "üõë–¢–æ–≤–∞—Ä –±–µ–∑ –¥–≤–∏–∂–∏–Ω–∏—è(–ø—Ä–æ–¥–∞–∂) ‚û°Ô∏è".upper(),
            },
            {"id": "marriage", "name": "–ë—Ä–∞–∫ –Ω–∞—Ç –¢–¢ üö≠‚ö†Ô∏è‚û°Ô∏è".upper()},
        ]

        return output


class ReportSalaryInput:
    """
    –û—Ç—á–µ—Ç—ã  –ø–æ –ó–ü
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = [
            {"id": "setting", "name": "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ‚û°Ô∏è".upper()},
            {"id": "get_salary_aks", "name": "–ó–ü –ø–æ –≥—Ä—É–ø. –∞–∫—Å. ‚û°Ô∏è".upper()},
            {
                "id": "get_salary_motivation_uuid",
                "name": "–ó–ü –∑–∞ –º–æ—Ç–∏–≤. —Ç–æ–≤–∞—Ä ‚û°Ô∏è".upper(),
            },
            {
                "id": "get_salary_total",
                "name": "–ó–ü –ü–û –ü–†–û–î–ê–í–¶–ê–ú",
            },
            {
                "id": "get_salary_total_day",
                "name": "–ó–ü –ó–ê –î–ï–ù–¨",
            },
        ]

        return output


class ReportsSalarySettingInput:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ó–ü
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "group_uuid_accessory", "name": "–ì—Ä—É–ø–ø –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ ‚û°Ô∏è".upper()},
            {
                "id": "motivation_uuid_accessory",
                "name": "–¢–æ–≤–∞—Ä –¥–æ–±. –º–æ—Ç–∏–≤–∞—Ü–∏–∏ ‚û°Ô∏è".upper(),
            },
            {"id": "assigning_salary", "name": "–û–∫–ª–∞–¥—ã –Ω–∞ –¢–¢ ‚Ç±‚û°Ô∏è".upper()},
            {"id": "motivation", "name": "–ú–æ—Ç–∏–≤. –∑–∞ –≤—ã–ø. –ø–ª–∞–Ω–∞  ‚Ç± ‚û°Ô∏è".upper()},
            {"id": "surcharge", "name": "–î–æ–ø–ª–∞—Ç–∞ –∫ –∑–ø ‚Ç± ‚û°Ô∏è".upper()},
        ]
        return output


class ReportGroupUuidAccessoryInput:
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä—É–ø–ø –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {
                "id": "get_group_uuid_accessory",
                "name": "–ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä—É–ø–ø –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ ‚û°Ô∏è".upper(),
            },
            {
                "id": "assigning_group_uuid_accessory",
                "name": "–ù–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—ã –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ ‚û°Ô∏è".upper(),
            },
        ]
        return output


class ReportMotivationInput:
    """
    –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—É–º–º—É –º–æ—Ç–≤–∏—Ü–∏–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {
                "id": "amount_of_motivation",
                "name": "–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—É–º. –∑–∞ –≤—ã–ø–æ–ª. –ø–ª. ‚Ç±‚û°Ô∏è".upper(),
            },
            {
                "id": "get_amount_of_motivation",
                "name": "–°—É–º–º–∞ –∑–∞ –≤—ã–ø–æ–ª. –ø–ª. ‚Ç± ‚û°Ô∏è".upper(),
            },
        ]
        return output


class ReportMotivationUuidInput:
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {
                "id": "product_ext_motivation",
                "name": "–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–æ–ø. –º–æ—Ç–∏–≤–∞—Ü–∏–∏ ‚û°Ô∏è".upper(),
            },
            {
                "id": "get_product_ext_motivation",
                "name": "–¢–æ–≤–∞—Ä –¥–æ–±. –º–æ—Ç–∏–≤–∞—Ü–∏–∏  ‚û°Ô∏è".upper(),
            },
        ]
        return output


class Report–êssignSalaryInput:
    """
    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–∫–ª–∞–¥–æ–≤ –Ω–∞ –¢–¢
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "assigning_salary_", "name": "–ù–∞–∑–Ω–∞—á–∏—Ç—å –æ–∫–ª–∞–¥ –Ω–∞ –¢–¢ ‚Ç±‚û°Ô∏è".upper()},
            {"id": "get_salary", "name": "–û–∫–ª–∞–¥—ã –Ω–∞ –¢–¢‚Ç± ‚û°Ô∏è".upper()},
        ]
        return output


class ReportMotivationInput:
    """
    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—É–º. –∑–∞ –≤—ã–ø–æ–ª.
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {
                "id": "amount_of_motivation",
                "name": "–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—É–º. –∑–∞ –≤—ã–ø–æ–ª. –ø–ª. ‚Ç±‚û°Ô∏è".upper(),
            },
            {
                "id": "get_amount_of_motivation",
                "name": "–°—É–º–º–∞ –∑–∞ –≤—ã–ø–æ–ª. –ø–ª. ‚Ç± ‚û°Ô∏è".upper(),
            },
        ]
        return output


class ReportSurchargeInput:
    """
    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—É–º. –¥–æ–ø–ª–∞—Ç—É –∫ –∑–ø.
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "assign_a_surcharge", "name": "–ù–∞–∑–Ω–∞—á–∏—Ç—å –¥–æ–ø–ª–∞—Ç—É –∫ –∑–ø ‚û°Ô∏è".upper()},
            {"id": "get_surcharge", "name": "–î–æ–ø–ª–∞—Ç–∞ –∫ –∑–ø  ‚û°Ô∏è".upper()},
        ]
        return output


class ReportsSettingsInput:
    """
    –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "clear_db", "name": "–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ‚û°Ô∏è".upper()},
        ]
        return output


class ReportsClearDbInput:
    """
    –ú–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "clear_db_employees", "name": "üë´ –û—á–∏—Å—Ç–∏—Ç—å (–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏) ‚û°Ô∏è".upper()},
            {"id": "clear_db_shops", "name": "üè™ –û—á–∏—Å—Ç–∏—Ç—å (–ú–∞–≥–∞–∑–∏–Ω—ã) ‚û°Ô∏è".upper()},
            {"id": "clear_db_documents", "name": "üìë –û—á–∏—Å—Ç–∏—Ç—å (–î–æ–∫—É–º–µ–Ω—Ç—ã) ‚û°Ô∏è".upper()},
            {"id": "clear_db_products", "name": "üõí –û—á–∏—Å—Ç–∏—Ç—å (–ü—Ä–æ–¥—É–∫—Ç—ã) ‚û°Ô∏è".upper()},
            {"id": "clear_db_z_report", "name": "üõí –û—á–∏—Å—Ç–∏—Ç—å (z) ‚û°Ô∏è".upper()},
            {"id": "clear_db_sesion", "name": "üõí –û—á–∏—Å—Ç–∏—Ç—å (Session) ‚û°Ô∏è".upper()},
            {"id": "clear_db_get_time", "name": "üõí –û—á–∏—Å—Ç–∏—Ç—å (GetTime) ‚û°Ô∏è".upper()},
            {"id": "clear_db_surplus", "name": "üõí –û—á–∏—Å—Ç–∏—Ç—å (Surplus) ‚û°Ô∏è".upper()},
        ]
        return output


class ShopAllInput:
    """
    –ú–∞–≥–∞–∑–∏–Ω—ã –∏ –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = [{"id": "all", "name": "{} ‚û°Ô∏è".format("–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã").upper()}]

        for item in get_shops_user_id(session):
            output.append(
                {"id": item["uuid"], "name": "{} ‚û°Ô∏è".format(item["name"]).upper()}
            )

        return output


class ShopAllInInput:
    """
    –ú–∞–≥–∞–∑–∏–Ω—ã –∏ –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = [
            {"id": "all", "name": "{} ‚û°Ô∏è".format("–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã").upper()},
            {
                "id": "20220202-B042-4021-803D-09E15DADE8A4",
                "name": "{} ‚û°Ô∏è".format("–ë–∞–≥—Ä–∞—Ç–∏–æ–Ω–∞").upper(),
            },
            {
                "id": "20220201-19C9-40B0-8082-DF8A9067705D",
                "name": "{} ‚û°Ô∏è".format("–°–∫–∞–ª–∞").upper(),
            },
        ]

        return output


class ShopInput:
    """
    –ú–∞–≥–∞–∑–∏–Ω—ã

    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = []

        uuid = []
        # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
        for i in range(int(session["room"]) + 1):
            # –µ—Å–ª–∏ –≤ 'uuid' –µ—Å—Ç—å –≤ session.params["inputs"][str(i)]
            if "shop" in session.params["inputs"][str(i)]:
                # –µ—Å–ª–∏ 'uuid' –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∫–ª—é—á–µ–º i –≤ —Å–ø–∏—Å–∫–µ uuid
                if session.params["inputs"][str(i)]["shop"] not in uuid:
                    # –¥–æ–±–æ–≤–ª—è–µ—Ç 'uuid' –≤ —Å–ø–∏—Å–æ–∫ uuid
                    uuid.append(session.params["inputs"][str(i)]["shop"])

        for item in get_shops_user_id(session):
            if item["uuid"] not in uuid:
                output.append(
                    {"id": item["uuid"], "name": "{} ‚û°Ô∏è".format(item["name"]).upper()}
                )

        return output


class EmployeesInput:
    """
    –í—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
    """

    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞".upper()

    type = "SELECT"

    def get_options(self, session: Session):
        output = []
        # employees = Employees.objects(stores__in=session.employee.stores)
        # for i in employees:
        #     print(i['name'])

        room = session["room"]
        # pprint(room)
        uuid = []
        # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
        for i in range(int(room) + 1):
            # –µ—Å–ª–∏ –≤ 'uuid' –µ—Å—Ç—å –≤ session.params["inputs"][str(i)]
            if "uuid" in session.params["inputs"][str(i)]:
                # –µ—Å–ª–∏ 'uuid' –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∫–ª—é—á–µ–º i –≤ —Å–ø–∏—Å–∫–µ uuid
                if session.params["inputs"][str(i)]["uuid"] not in uuid:
                    # –¥–æ–±–æ–≤–ª—è–µ—Ç 'uuid' –≤ —Å–ø–∏—Å–æ–∫ uuid
                    uuid.append(session.params["inputs"][str(i)]["uuid"])
        shop_id = get_shops_uuid_user_id(session)
        employees = Employees.objects(stores__in=shop_id)

        uuids = []
        for item in employees:
            if item["lastName"] not in uuid:
                if item["lastName"] not in uuids:
                    output.append({"id": item["lastName"], "name": item["name"]})
                    uuids.append(item["lastName"])

        return output


class GroupInput:
    """
    –ì—Ä—É–ø–ø—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    """

    name = "–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ üìã".upper()
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = [{"id": "all", "name": "{} ‚û°Ô∏è".format("–í—Å–µ –≥—Ä—É–ø–ø—ã").upper()}]

        for k, v in get_group(session).items():
            output.append({"id": k, "name": "{} ‚û°Ô∏è".format(v)})

        return output


class GroupsInput:
    pprint("GroupsInput")
    """
    –ì—Ä—É–ø–ø—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    """
    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É(—ã)".upper()

    type = "SELECT"

    def get_options(self, session: Session):
        output = []

        shop_id = get_shops_uuid_user_id(session)

        room = session["room"]
        uuid = []
        # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
        for i in range(int(session["room"]) + 1):
            # –µ—Å–ª–∏ –≤ 'uuid' –µ—Å—Ç—å –≤ session.params["inputs"][str(i)]
            if "parentUuid" in session.params["inputs"][str(i)]:
                # –µ—Å–ª–∏ 'uuid' –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∫–ª—é—á–µ–º i –≤ —Å–ø–∏—Å–∫–µ uuid
                if session.params["inputs"][str(i)]["parentUuid"] not in uuid:
                    # –¥–æ–±–æ–≤–ª—è–µ—Ç 'uuid' –≤ —Å–ø–∏—Å–æ–∫ uuid
                    uuid.append(session.params["inputs"][str(i)]["parentUuid"])
        uuids = []
        for item in get_products_shops(session, shop_id):
            if item["uuid"] not in uuid:
                if item["uuid"] not in uuids:
                    output.append({"id": item["uuid"], "name": item["name"]})
                    uuids.append(item["uuid"])

        return output


class ProductsInput:
    """
    –ü—Ä–æ–¥—É–∫—Ç—ã
    """

    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = []

        shop_id = get_shops_uuid_user_id(session)

        parentUuid = session.params["inputs"]["0"]["Uuid"]

        products = Products.objects(
            __raw__={
                "shop_id": {"$in": shop_id},
                # 'group': True,
                "parentUuid": parentUuid,
            }
        )

        for item in products:
            s = str(item["name"]).split(" ")

            output.append(
                {
                    "id": item["uuid"],
                    "name": " ".join(s[0:4]),
                    # 'name': item['name']
                }
            )
        return output


class ProductInput:
    """
    –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    """

    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
    type = "SELECT"

    def get_options(self, session: Session):
        output = []
        # shops = Shop.objects(uuid__in=session.employee.stores)

        shop_id = get_shops_uuid_user_id(session)
        pprint(shop_id)

        room = session["room"]
        # pprint(room)
        uuid = []
        # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
        for i in range(int(session["room"]) + 1):
            # –µ—Å–ª–∏ –≤ 'uuid' –µ—Å—Ç—å –≤ session.params["inputs"][str(i)]
            if "uuid" in session.params["inputs"][str(i)]:
                # –µ—Å–ª–∏ 'uuid' –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∫–ª—é—á–µ–º i –≤ —Å–ø–∏—Å–∫–µ uuid
                if session.params["inputs"][str(i)]["uuid"] not in uuid:
                    # –¥–æ–±–æ–≤–ª—è–µ—Ç 'uuid' –≤ —Å–ø–∏—Å–æ–∫ uuid
                    uuid.append(session.params["inputs"][str(i)]["uuid"])
        product = Products.objects(
            shop_id__in=shop_id,
            group__exact=False,
            parentUuid=session.params["inputs"]["0"]["parentUuid"],
        )
        pprint(product)
        uuids = []
        for item in product:
            # pprint(session.params['inputs'].values())
            if item["uuid"] not in uuid:
                if item["uuid"] not in uuids:
                    s = str(item["name"]).split(" ")

                    output.append(
                        {
                            "id": item["uuid"],
                            "name": " ".join(s[0:3]),
                            # 'name': item['name']
                        }
                    )
                    uuids.append(item["uuid"])
        # return output
        #             output.append({"id": item["uuid"], "name": item["name"]})

        return output


class ProductElectroInput:
    name = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞‚Ñ¢Ô∏è‚û°Ô∏è".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = []
        shops_id = session.params["inputs"]["0"]["shop"]
        # pprint(shops_id)
        group_id = [
            "78ddfd78-dc52-11e8-b970-ccb0da458b5a",
            "bc9e7e4c-fdac-11ea-aaf2-2cf05d04be1d",
            "0627db0b-4e39-11ec-ab27-2cf05d04be1d",
        ]
        product = Products.objects(
            __raw__={"shop_id": shops_id, "parentUuid": {"$in": group_id}}
        )
        for item in product:
            # pprint(item['quantity'])
            # pprint(item['uuid'])
            # pprint(item['name'])
            if item["quantity"]:
                s = str(item["name"]).split(" ")

                # pprint(s)
                # pprint(' '.join(s[1:4]))
                output.append({"id": item["uuid"], "name": " ".join(s[0:4])})

        return output


class ProductsSaleInput:
    """
    –ü—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
    """

    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç".upper()
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = []

        shops = get_shops(session)
        shop_id = shops["shop_id"]

        parentUuid = session.params["inputs"]["0"]["group"]

        period = get_period_day(session)

        since = period["since"]
        until = period["until"]

        if parentUuid == "all":
            products = Products.objects(
                __raw__={
                    "shop_id": {"$in": shop_id},
                }
            )
        else:
            products = Products.objects(
                __raw__={"shop_id": {"$in": shop_id}, "parentUuid": parentUuid}
            )
        products_uuid = [element.uuid for element in products]

        documents = Documents.objects(
            __raw__={
                "closeDate": {"$gte": since, "$lt": until},
                "shop_id": {"$in": shop_id},
                "x_type": "SELL",
                "transactions.commodityUuid": {"$in": products_uuid},
            }
        )
        uuid_ = []
        _dict = {}
        for doc in documents:
            for trans in doc["transactions"]:
                # pprint(trans)
                if trans["x_type"] == "REGISTER_POSITION":
                    if trans["commodityUuid"] not in uuid_:
                        uuid_.append(trans["commodityUuid"])
                    if trans["commodityUuid"] not in _dict:
                        _dict[trans["commodityUuid"]] = trans["quantity"]
                    else:
                        _dict[trans["commodityUuid"]] += trans["quantity"]
        session.params["uuid"] = uuid_
        session.params["uuid_quantity"] = _dict

        uuid = []
        # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
        for i in range(int(session["room"]) + 1):
            # –µ—Å–ª–∏ –≤ 'uuid' –µ—Å—Ç—å –≤ session.params["inputs"][str(i)]
            if "uuid" in session.params["inputs"][str(i)]:
                # –µ—Å–ª–∏ 'uuid' –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∫–ª—é—á–µ–º i –≤ —Å–ø–∏—Å–∫–µ uuid
                if session.params["inputs"][str(i)]["uuid"] not in uuid:
                    # –¥–æ–±–æ–≤–ª—è–µ—Ç 'uuid' –≤ —Å–ø–∏—Å–æ–∫ uuid
                    uuid.append(session.params["inputs"][str(i)]["uuid"])
        # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç –∏–∑ –±–¥ session —Ä–∞–Ω–∏–µ –≤–∞–±—Ä–∞–Ω–Ω—ã 'parentUuid' –≥—Ä—É–ø–ø—ã
        products = Products.objects(
            __raw__={
                "shop_id": {"$in": shop_id},
                # "group": True,
                "parentUuid": parentUuid,
                "uuid": {"$in": uuid_},
            }
        )
        for item in products:
            # –ï—Å–ª–∏ item['uuid'] –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ uuid
            if item["uuid"] not in uuid:
                # –∑–∞–ø–∏—Å—ã–≤–∫–µ—Ç –≤ output {'id': item['uuid'], 'name': item['name']}
                s = str(item["name"]).split(" ")

                # pprint(s)
                # pprint(' '.join(s[1:4]))
                output.append({"id": item["uuid"], "name": " ".join(s[1:4])})
        return output


class DocStatusInput:
    """–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ -
    open –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–æ—Ä,
    completed –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä
    """

    name = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–∂–∏—Ç—å –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–∂–∏—Ç—å –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "open", "name": "–ü—Ä–æ–¥–æ–∂–∏—Ç—å".upper()},
            {"id": "completed", "name": "–ó–∞–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç".upper()},
        ]
        return output


class PeriodDateInput:
    """
    –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã
    """

    name = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ üìÖ".upper()
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ üìÖ".upper()
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = [
            {"id": "day", "name": "üìÜ –î–µ–Ω—å ‚û°Ô∏è".upper()},
            {"id": "week", "name": "üìÜ –ù–µ–¥–µ–ª—è ‚û°Ô∏è".upper()},
            {"id": "fortnight", "name": "üìÜ –î–≤–µ –Ω–µ–¥–µ–ª–∏ ‚û°Ô∏è".upper()},
            {"id": "month", "name": "üìÜ –ú–µ—Å—è—Ü ‚û°Ô∏è".upper()},
            {"id": "two months", "name": "üìÜ –î–≤–∞ –º–µ—Å—è—Ü–∞ ‚û°Ô∏è".upper()},
            {"id": "6 months", "name": "üìÜ 6 –ú–µ—Å—è—Ü–µ–≤ ‚û°Ô∏è".upper()},
            {"id": "12 months", "name": "üìÜ 12 –ú–µ—Å—è—Ü–µ–≤ ‚û°Ô∏è".upper()},
            {"id": "24 months", "name": "üìÜ 24 –ú–µ—Å—è—Ü–µ–≤ ‚û°Ô∏è".upper()},
            {"id": "48 months", "name": "üìÜ 48 –ú–µ—Å—è—Ü–µ–≤ ‚û°Ô∏è".upper()},
        ]

        return output


class OpenDatePastInput:
    """–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞.
    –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞ –¥–∞—Ç—ã –±—É–¥—É—Ç –º–µ—Å—è—Ü–∞–º–∏.
    –ò–Ω–∞—á–µ –¥–Ω—è–º–∏.
    –û—Ç –Ω–∞—á–∞–ª–∞ –¥–∞—Ç—ã –ø–∏—Ä–∏–æ–¥–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–æ –ø–∏—Ä–∏–æ–¥–∞ "
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = []
        since = period_first_day_of_the_month(
            session["params"]["inputs"]["0"]["period"]
        )
        until = utcnow().isoformat()
        period = ["day", "week", "fortnight", "month"]
        if session["params"]["inputs"]["0"]["period"] in period:
            intervals = get_intervals(since, until, "days", 1)
        else:
            intervals = get_intervals(since, until, "months", 1)
        for left, right in intervals:
            output.append({"id": left, "name": "{} ‚û°Ô∏è".format(left[0:10])})

        return output


class OpenDatePast2Input:
    """
    –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–∏—Ä–∏–æ–¥–∞ –ø–æ –¥–Ω—è–º.
    –û—Ç –Ω–∞—á–∞–ª–∞ –¥–∞—Ç—ã –ø–∏—Ä–∏–æ–¥–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–æ –ø–∏—Ä–∏–æ–¥–∞ "
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = []
        since = period_first_day_of_the_month(
            session["params"]["inputs"]["0"]["period"]
        )
        until = utcnow().isoformat()
        intervals = get_intervals(since, until, "days", 1)
        for left, right in intervals:
            output.append({"id": left, "name": "{} ‚û°Ô∏è".format(left[0:10])})

        return output


class OpenDateFutureInput:
    """
    –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–∏—Ä–∏–æ–¥–∞ –ø–æ –¥–Ω—è–º.
    –û—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –¥–æ –∫–æ–Ω—Ü–∞ –¥–∞—Ç—ã –ø–∏—Ä–∏–æ–¥–∞.
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–æ –ø–∏—Ä–∏–æ–¥–∞ "
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = []
        since = utcnow().isoformat()
        until = period_to_date_2(session["params"]["inputs"]["0"]["period"])
        intervals = get_intervals(since, until, "days", 1)
        for left, right in intervals:
            output.append({"id": left, "name": "{} ‚û°Ô∏è".format(left[0:10])})

        return output


class CloseDatePastInput:
    """
    –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∏—Ä–∏–æ–¥–∞ –ø–æ –¥–Ω—è–º.
    –û—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –ø–∏—Ä–∏–æ–¥–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–∏—Ä–∏–æ–¥–∞ "
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = []
        # pprint(session['params']['inputs']['period'])
        since = session["params"]["inputs"]["0"]["openDate"]
        until = utcnow().isoformat()
        intervals = get_intervals(since, until, "days", 1)

        # pprint(intervals)
        for left, right in intervals:
            # pprint(left)
            output.append({"id": left, "name": "{} ‚û°Ô∏è".format(left[0:10])})

        return output


class CloseDateFutureInput:
    """
    –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∏—Ä–∏–æ–¥–∞ –ø–æ –¥–Ω—è–º.
    –û—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –¥–æ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –ø–∏—Ä–∏–æ–¥–∞.
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–∏—Ä–∏–æ–¥–∞ "
    type = "SELECT"

    def get_options(self, session: Session):
        output = []
        # pprint(session['params']['inputs']['period'])
        since = session["params"]["inputs"]["0"]["openDate"]
        until = period_to_date_2(session["params"]["inputs"]["0"]["period"])
        intervals = get_intervals(since, until, "days", 1)

        # pprint(intervals)
        for left, right in intervals:
            # pprint(left)
            output.append({"id": left, "name": "{} ‚û°Ô∏è".format(left[0:10])})

        return output


class TokenEvotorInput:
    """
    Token Telebot
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ–∫–µ–Ω Telebot ‚úçÔ∏è"
    type = "MESSAGE"


class DocumentsAcceptInput:
    """
    –í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–µ–º–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞"
    type = "SELECT"

    def get_options(self, session: Session) -> [{str, str}]:
        output = []
        params = session.params["inputs"]["0"]
        period = get_period(session)

        since = period["since"]
        until = period["until"]

        shops = get_shops_user_id(session)
        shop_id = shops["shop_id"]

        if params["report"] == "get_accept":
            documents = Documents.objects(
                __raw__={
                    "closeDate": {"$gte": since, "$lt": until},
                    "shop_id": {"$in": shop_id},
                    "x_type": "ACCEPT",
                }
            )
        if params["report"] == "get_write_off":
            documents = Documents.objects(
                __raw__={
                    "closeDate": {"$gte": since, "$lt": until},
                    "shop_id": shop_id,
                    "x_type": "WRITE_OFF",
                }
            )
            # pprint(documents)
        for item in documents:
            output.append(
                {
                    "id": item["number"],
                    "name": get(item["closeDate"]).shift(hours=3).isoformat()[0:10],
                }
            )

        return output


class –°ounterpartyInput:
    name = "–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞"
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "sns_", "name": "–°–ù–°"},
            {"id": "don_", "name": "–î–û–ù–°–ö–û–ô-–¢–ê–ë–ê–ö"},
            {"id": "mega_", "name": "–ú–ï–ì–ê–ü–û–õ–ò–°"},
            {"id": "fizzy_", "name": "FIZZY"},
        ]

        return output


class AfsInput:
    name = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ".upper()
    desc = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ üó∫".upper()
    type = "LOCATION"

    def get_options(self, session: Session):
        output = [{"name": "—á–µ–∫–∏–Ω"}]

        return output

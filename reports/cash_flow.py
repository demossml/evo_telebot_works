from arrow import utcnow, get
from bd.model import Session, CashRegister
from pprint import pprint
from .util import period_to_date, get_intervals

name = "üîõüí≤ –î–≤–∏–∂–µ–Ω–∏–µ –¥/—Å ‚û°Ô∏è".upper()
desc = "–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç –∑–∞ –ø–∏—Ä–∏–æ–¥"
mime = "text"


class ReportsInput:
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "get_sales_by_shops", "name": "–í ‚ÇΩ –ü–û –í–°–ï–ú –¢–¢"},
            {
                "id": "get_sales_by_shop_product_group_unit",
                "name": "–í —à—Ç –ø–æ –≥—Ä—É–ø–ø–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—Å–µ–º –¢–¢",
            },
            {
                "id": "get_sales_by_shop_product_group_rub",
                "name": "–í ‚ÇΩ –ø–æ –≥—Ä—É–ø–ø–µ —Ç–æ–≤–∞—Ä–æ–≤ ",
            },
            {
                "id": "get_sales_product_group_unit_by_shop",
                "name": "–í —à—Ç –ø–æ –≥—Ä—É–ø–ø–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—Å–µ–º –¢–¢",
            },
            {
                "id": "get_sales_product_product_unit_by_shop",
                "name": "–í —à—Ç –ø–æ —Ç–æ–≤–∞—Ä—É –ø–æ –≤—Å–µ–º –¢–¢",
            },
            {
                "id": "get_sales_product_group_unit_by_shop",
                "name": "–í —à—Ç –ø–æ –≥—Ä—É–ø–ø–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—Å–µ–º –¢–¢",
            },
        )

        return output


class X_typeInput:
    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç"
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "CASH_INCOME", "name": "–í–Ω–µ—Å–µ–Ω–∏–µ".upper()},
            {"id": "CASH_OUTCOME", "name": "–í—ã–ø–ª–∞—Ç—ã ".upper()},
            {"id": "CASH_OUTCOME", "name": "–í—ã–ø–ª–∞—Ç—ã ".upper()},
        )
        return output


class PeriodOpenDateInput:
    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ üóì".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "day", "name": "–î–µ–Ω—å ‚û°Ô∏è".upper()},
            {"id": "week", "name": "–ù–µ–¥–µ–ª—è ‚û°Ô∏è".upper()},
            {"id": "fortnight", "name": "–î–≤–µ –Ω–µ–¥–µ–ª–∏ ‚û°Ô∏è".upper()},
            {"id": "month", "name": "–ú–µ—Å—è—Ü ‚û°Ô∏è".upper()},
            {"id": "two months", "name": "–î–≤–∞ –º–µ—Å—è—Ü–∞ ‚û°Ô∏è".upper()},
            {"id": "three months", "name": "–¢—Ä–∏ –º–µ—Å—è—Ü–∞ ‚û°Ô∏è".upper()},
            {"id": "four months", "name": "–ß–µ—Ç—ã—Ä–µ –º–µ—Å—è—Ü–∞ ‚û°Ô∏è".upper()},
            {"id": "five months", "name": "–ü—è—Ç—å –º–µ—Å—è—Ü–∞ ‚û°Ô∏è".upper()},
            {"id": "six months", "name": "–®–µ—Å—Ç—å –º–µ—Å—è—Ü–∞ ‚û°Ô∏è".upper()},
            {"id": "seven months", "name": "–ß–µ—Ç—ã—Ä–µ –º–µ—Å—è—Ü–∞ ‚û°Ô∏è".upper()},
        )

        return output


class baseInput:
    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ"
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "All", "name": "–í—Å—ë ‚û°Ô∏è".upper()},
            {"id": "–ê—Ä–µ–Ω–¥–∞1", "name": "–ê—Ä–µ–Ω–¥–∞1 ‚û°Ô∏è".upper()},
            {"id": "–ó–ü", "name": "–ó–ü ‚û°Ô∏è".upper()},
            {"id": "–ó–ü –î", "name": "–ó–ü –î ‚û°Ô∏è".upper()},
            {"id": "–ê—Ä–µ–Ω–¥–∞", "name": "–ê—Ä–µ–Ω–¥–∞ ‚û°Ô∏è".upper()},
            {"id": "–ì–°–ú", "name": "–ì–°–ú ‚û°Ô∏è".upper()},
            {"id": "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ", "name": "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ ‚û°Ô∏è".upper()},
            {"id": "–ó–∞–∫—É–ø–∫–∞ –¢–æ–≤–∞—Ä–∞", "name": "–ó–∞–∫—É–ø–∫–∞ –¢–æ–≤–∞—Ä–∞ ‚û°Ô∏è".upper()},
            {"id": "–ü—Ä–æ—á–∏–µ", "name": "–ü—Ä–æ—á–∏–µ ‚û°Ô∏è".upper()},
        )
        return output


class OpenDateInput:
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–æ –ø–∏—Ä–∏–æ–¥–∞ üìÖ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = []
        # pprint(session['params']['inputs']['period'])
        since = period_to_date(session["params"]["inputs"]["periodOpenDate"])
        until = utcnow().isoformat()
        intervals = get_intervals(since, until, "days", 1)
        # pprint(intervals)
        for left, right in intervals:
            # pprint(left)
            output.append({"id": left, "name": "{} ‚û°Ô∏è".format(left[0:10])})

        return output


class PeriodCloseDateInput:
    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥"
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "day", "name": "–î–µ–Ω—å"},
            {"id": "week", "name": "–ù–µ–¥–µ–ª—è"},
            {"id": "fortnight", "name": "–î–≤–µ –Ω–µ–¥–µ–ª–∏"},
            {"id": "month", "name": "–ú–µ—Å—è—Ü"},
        )

        return output


class CloseDateInput:
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–∏—Ä–∏–æ–¥–∞ "
    type = "SELECT"

    def get_options(self, session: Session):
        output = []
        # pprint(session['params']['inputs']['period'])
        since = session["params"]["inputs"]["openDate"]
        until = utcnow().isoformat()
        intervals = get_intervals(since, until, "days", 1)

        # pprint(intervals)
        for left, right in intervals:
            # pprint(left)
            output.append({"id": left, "name": "{} ‚û°Ô∏è".format(left[0:10])})

        return output


class baseInput:
    desc = "–û—Å–Ω–æ–≤–∞–Ω–∏–µ:"
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "–ê—Ä–µ–Ω–¥–∞1", "name": "–ê—Ä–µ–Ω–¥–∞1 ‚û°Ô∏è".upper()},
            {"id": "–ó–ü", "name": "–ó–ü ‚û°Ô∏è".upper()},
            {"id": "–ó–ü –î", "name": "–ó–ü –î ‚û°Ô∏è".upper()},
            {"id": "–ê—Ä–µ–Ω–¥–∞", "name": "–ê—Ä–µ–Ω–¥–∞ ‚û°Ô∏è".upper()},
            {"id": "–ì–°–ú", "name": "–ì–°–ú ‚û°Ô∏è".upper()},
            {"id": "–ó–∞–∫—É–ø–∫–∞ –¢–æ–≤–∞—Ä–∞", "name": "–ó–∞–∫—É–ø–∫–∞ –¢–æ–≤–∞—Ä–∞ ‚û°Ô∏è".upper()},
            {"id": "–ü—Ä–æ—á–∏–µ", "name": "–ü—Ä–æ—á–∏–µ ‚û°Ô∏è".upper()},
        )

        return output


def get_inputs(session: Session):
    return {
        "x_type": X_typeInput,
        "periodOpenDate": PeriodOpenDateInput,
        # 'base': baseInput,
        "openDate": OpenDateInput,
        "closeDate": CloseDateInput,
    }


def generate(session: Session):
    params = session.params["inputs"]["0"]

    since = get(params["openDate"]).replace(hour=3, minute=00).isoformat()

    until = get(params["closeDate"]).replace(hour=23, minute=00).isoformat()
    pprint(until)
    pprint(since)
    x_type = params["x_type"]
    if x_type == "CASH_INCOME":
        who = "–û—Ç –∫–æ–≥–æ"
        identifier = "–í–Ω–µ—Å–µ–Ω–∏–µ"
    else:
        who = "–ö–æ–º—É"
        identifier = "–í—ã–ø–ª–∞—Ç—ã"
    document = CashRegister.objects(
        __raw__={
            "closeDate": {"$gte": since, "$lt": until},
            "payment": "cash",
            "x_type": x_type,
            # 'base': params['base']
        }
    )
    result = []
    for doc in document:
        result.append(
            {
                who: doc["who"],
                "–î–∞—Ç–∞:": doc["closeDate"][0:19],
                "–û—Å–Ω–æ–≤–∞–Ω–∏–µ:": doc["base"],
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:": doc["comment"],
                "–°—É–º–º–∞:": "{}‚ÇΩ".format(doc["cash"]),
                "‚Ññ:": doc["number"],
                "": identifier,
            }
        )
    return result

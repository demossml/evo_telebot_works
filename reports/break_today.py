from arrow import utcnow, get
from bd.model import (
    Session,
    Shift_Opening_Report,
)
from .util import get_shops_user_id

from pprint import pprint
import plotly.express as px
from io import BytesIO

name = "üïíÔ∏èüö¨üåØ–ø–µ—Ä–µ—Ä—ã–≤—ã —Å–µ–≥–æ–¥–Ω—è ‚û°Ô∏è".upper()
desc = "–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö"
mime = "image_bytes"


def get_inputs(session: Session):
    return {}


def generate(session: Session):
    result = []

    since = utcnow().replace(hour=3, minute=00).isoformat()
    until = utcnow().replace(hour=20, minute=59).isoformat()

    shops = get_shops_user_id(session)

    break_data = {}

    for shop in shops:
        documents_break_report = Shift_Opening_Report.objects(
            __raw__={
                "openData": {"$gte": since, "$lt": until},
                "x_type": "BREAK",
                "shop_id": shop["uuid"],
            }
        )

        total_delta = 0

        if len(documents_break_report) > 0:
            for doc in documents_break_report:
                if "closeDate" in doc:
                    delta = (
                        (get(doc["closeDate"]) - get(doc["openData"])).seconds
                        // 60
                        % 60
                    )
                    total_delta += delta
        if total_delta > 0:
            break_data.update({shop["name"]: total_delta})
    break_result = {}
    for k, v in break_data.items():
        break_result.update(
            {
                k: f"{v} –º–∏–Ω—É—Ç",
            }
        )
    pprint(break_result)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂
    shop_names = list(break_data.keys())
    delta_ = list(break_data.values())

    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    fig = px.pie(
        names=shop_names,
        values=delta_,
        title="–î–æ–ª—è –≤—Ä–µ–º—è–Ω–∏ –ø–µ—Ä–µ—Ä—ã–≤–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º",
        labels={"names": "–ú–∞–≥–∞–∑–∏–Ω—ã", "values": "–í—ã—Ä—É—á–∫–∞"},
        # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    )
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    fig.update_layout(
        title="–ü—Ä–æ–¥–∞–∂–∏  –ø–æ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º",
        font=dict(size=18, family="Arial, sans-serif", color="black"),
        # plot_bgcolor="black",  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –≤ –æ–±—ä–µ–∫—Ç BytesIO
    image_buffer = BytesIO()

    fig.write_image(image_buffer, format="png", width=800, height=800)

    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
    image_buffer.seek(0)

    return [break_result], image_buffer

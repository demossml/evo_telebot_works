from bd.model import Shop, Products, Documents, Session, Employees
from .util import get_intervals, get_period, get_shops_user_id, get_shops
from pprint import pprint
from collections import OrderedDict
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation


from .inputs import (
    ReportSalesInput,
    ShopAllInput,
    GroupInput,
    PeriodDateInput,
    OpenDatePastInput,
    CloseDatePastInput,
)


name = "üõí –û–¢–ß–ï–¢–´ –ü–û –ü–†–û–î–ê–ñ–ê–ú ‚û°Ô∏è"
desc = "–û–¢–ß–ï–¢–´ –ø–æ –ü–†–û–î–ê–ñ–ê–ú"
mime = "text"


def get_inputs(session: Session):
    period = ("day", "week", "fortnight", "month")
    if session.params["inputs"]["0"]:
        if "period" in session.params["inputs"]["0"]:
            if session.params["inputs"]["0"]["period"] == "day":
                return {}
            if session.params["inputs"]["0"]["period"] not in period:
                return {"openDate": OpenDatePastInput}
            else:
                return {"openDate": OpenDatePastInput, "closeDate": CloseDatePastInput}
        if session.params["inputs"]["0"]["report"] == "get_sales_by_day_of_the_week":
            shop_uuid = get_shops_user_id(session)
            if len(shop_uuid) > 0:
                return {"shop": ShopAllInput, "period": PeriodDateInput}
            else:
                return {
                    "period": PeriodDateInput,
                }
        if (
            session.params["inputs"]["0"]["report"]
            == "get_sales_by_shop_product_group_rub"
        ):
            shop_uuid = get_shops_user_id(session)
            if len(shop_uuid) > 0:
                return {
                    "shop": ShopAllInput,
                    "group": GroupInput,
                    "period": PeriodDateInput,
                }
            else:
                return {
                    "group": GroupInput,
                    "period": PeriodDateInput,
                }
        if (
            session.params["inputs"]["0"]["report"]
            == "get_sales_by_shop_product_group_unit"
        ):
            shop_uuid = get_shops_user_id(session)
            if len(shop_uuid) > 0:
                return {
                    "shop": ShopAllInput,
                    "group": GroupInput,
                    "period": PeriodDateInput,
                }
            else:
                return {
                    "group": GroupInput,
                    "period": PeriodDateInput,
                }

    else:
        return {"report": ReportSalesInput}


def generate(session: Session):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Å–µ—Å—Å–∏–∏
    params = session.params["inputs"]["0"]

    period = get_period(session)
    since = period["since"]
    until = period["until"]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö
    shops = get_shops(session)
    shop_id = shops["shop_id"]
    shop_name = shops["shop_name"]

    # –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    x_type = ["SELL", "PAYBACK"]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'group'
    if "group" in params:
        if params["group"] == "all":
            products = Products.objects(
                __raw__={
                    "shop_id": {"$in": shop_id},
                }
            )
        else:
            products = Products.objects(
                __raw__={"shop_id": {"$in": shop_id}, "parentUuid": params["group"]}
            )
        products_uuid = [element.uuid for element in products]

    if params["report"] == "get_sales_by_day_of_the_week":
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —Å—É–º–º –ø—Ä–æ–¥–∞–∂ –∏ —Ç–∏–ø–æ–≤ –æ–ø–ª–∞—Ç—ã
        payment_type = {
            "CARD": "–ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π",
            "ADVANCE": "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–æ–π (–∑–∞—á–µ—Ç–æ–º –∞–≤–∞–Ω—Å–∞)",
            "CASH": "–ù–∞–ª–∏—á–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏",
            "COUNTEROFFER": "–í—Å—Ç—Ä–µ—á–Ω—ã–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º",
            "CREDIT": "–ü–æ—Å—Ç–æ–ø–ª–∞—Ç–æ–π (–≤ –∫—Ä–µ–¥–∏—Ç)",
            "ELECTRON": "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏",
            "UNKNOWN": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ. –ü–æ-—É–º–æ–ª—á–∞–Ω–∏—é",
        }
        payment_type_sum_sell_total = {ptype: 0 for ptype in payment_type}
        sum_sell_total = 0
        result = []
        intervals = get_intervals(since, until, "days", 1)
        for since_, until_ in intervals:
            for shop in shop_id:
                _dict = {}
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–µ—Å—Å–∏–µ–π
                documents_open_session = Documents.objects(
                    __raw__={
                        "closeDate": {"$gte": since, "$lt": until},
                        "shop_id": shop,
                    }
                ).first()
                if documents_open_session:
                    employees = Employees.objects(
                        uuid=documents_open_session.closeUserUuid
                    ).first()
                    last_name = employees.lastName
                    name_ = employees.name
                else:
                    last_name = ""
                    name_ = ""

                shop_ = Shop.objects(uuid__exact=shop).only("name").first()
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
                documents = Documents.objects(
                    __raw__={
                        "closeDate": {"$gte": since_, "$lt": until_},
                        "shop_id": shop,
                        "x_type": "SELL",
                    }
                )
                if len(documents) > 0:
                    sum_sell = 0
                    payment_type_sum_sell = {
                        "CARD": 0,
                        "ADVANCE": 0,
                        "CASH": 0,
                        "COUNTEROFFER": 0,
                        "CREDIT": 0,
                        "ELECTRON": 0,
                        "UNKNOWN": 0,
                    }

                    for doc in documents:
                        for trans in doc["transactions"]:
                            if trans["x_type"] == "DOCUMENT_CLOSE":
                                sum_sell += trans["sum"]
                                sum_sell_total += trans["sum"]
                            if trans["x_type"] == "PAYMENT":
                                payment_type_sum_sell[trans["paymentType"]] += trans[
                                    "sum"
                                ]
                                payment_type_sum_sell_total[
                                    trans["paymentType"]
                                ] += trans["sum"]

                    _dict["–ú–∞–≥–∞–∑–∏–Ω:"] = "{}:".format(shop_.name).upper()
                    _dict["–ü–æ—Ä–¥–∞–≤–µ—Ü:"] = "{} {}:".format(last_name, name_).upper()
                    _dict["–î–∞—Ç–∞:"] = since_[0:10]
                    _dict["–°—É–º–º–∞:"] = "{} {}".format(sum_sell, "‚ÇΩ")

                    for k, v in payment_type_sum_sell.items():
                        if v > 0:
                            _dict[payment_type[k]] = "{} {}".format(v, "‚ÇΩ")

                else:
                    _dict["–ú–∞–≥–∞–∑–∏–Ω:"] = "{}:".format(shop_.name).upper()
                    _dict["–î–∞—Ç–∞:"] = since_[0:10]
                    _dict["–°—É–º–º–∞:"] = "{} {}".format(0, "‚ÇΩ")

                result.append(_dict)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        dict_total = {
            "–ò—Ç–æ–≥–æ:".upper(): "",
            "–ù–∞—á–∞–ª–æ –ø–∏—Ä–∏–æ–¥–∞:": since[0:10],
            "–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–∏—Ä–∏–æ–¥–∞:": until[0:10],
        }
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–∏–ø–∞–º –æ–ø–ª–∞—Ç—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏
        for k, v in payment_type_sum_sell_total.items():
            if v > 0:
                dict_total[payment_type[k]] = "{} {}".format(v, "‚ÇΩ")
        dict_total["–°—É–º–º–∞:"] = "{} {}".format(sum_sell_total, "‚ÇΩ")
        result.append(dict_total)
        return result

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ "report" –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è–µ–º–æ–π –∑–∞–¥–∞—á–∏
    if params["report"] == "get_sales_by_shop_product_group_rub":
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MongoDB
        documents = Documents.objects(
            __raw__={
                "closeDate": {"$gte": since, "$lt": until},
                "shop_id": {"$in": shop_id},
                "x_type": "SELL",
                "transactions.commodityUuid": {"$in": products_uuid},
            }
        )

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        sales_data = {}

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        for doc in documents:
            for trans in doc["transactions"]:
                if trans["x_type"] == "REGISTER_POSITION":
                    if trans["commodityUuid"] in products_uuid:
                        commodity_name = trans["commodityName"]
                        sale_sum = trans["sum"]

                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å —Å—É–º–º –ø—Ä–æ–¥–∞–∂ –ø–æ —Ç–æ–≤–∞—Ä—É
                        if commodity_name in sales_data:
                            sales_data[commodity_name] += sale_sum
                        else:
                            sales_data[commodity_name] = sale_sum

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ
        shop = Shop.objects(uuid__exact=shop_id[0]).only("name").first()

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        sorted_sales_data = dict(
            OrderedDict(sorted(sales_data.items(), key=lambda t: -t[1]))
        )

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂
        total_sales = sum(sorted_sales_data.values())

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        total_info = {}
        for k, v in sorted_sales_data.items():
            total_info[k] = f"{v} ‚ÇΩ"
        total_info["–ò—Ç–æ–≥–æ:"] = f"{total_sales} ‚ÇΩ"
        total_info["–ú–∞–≥–∞–∑–∏–Ω:"] = shop.name
        total_info["–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞:"] = since[0:10]
        total_info["–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞:"] = until[0:10]

        return [total_info]
    if params["report"] == "get_sales_by_shop_product_group_unit":
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        documents = Documents.objects(
            __raw__={
                "closeDate": {"$gte": since, "$lt": until},
                "shop_id": {"$in": shop_id},
                "x_type": "SELL",
                "transactions.commodityUuid": {"$in": products_uuid},
            }
        )

        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        sales_by_product = {}

        # –û–±—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        for doc in documents:
            for trans in doc["transactions"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                if (
                    trans["x_type"] == "REGISTER_POSITION"
                    and trans["commodityUuid"] in products_uuid
                ):
                    commodity_name = trans["commodityName"]
                    quantity = trans["quantity"]
                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º
                    if commodity_name in sales_by_product:
                        sales_by_product[commodity_name] += quantity
                    else:
                        sales_by_product[commodity_name] = quantity

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–∂
        sorted_sales = dict(
            OrderedDict(sorted(sales_by_product.items(), key=lambda t: -t[1]))
        )
        pprint(sales_by_product)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        # product_names = list(sales_by_product.keys())
        # quantities = list(sales_by_product.values())

        # # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        # plt.figure(figsize=(10, 10))
        # plt.pie(quantities, labels=product_names, autopct="%1.1f%%", startangle=140)
        # plt.axis("equal")  # –ó–∞–¥–∞–µ–º —Ä–∞–≤–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –∫—Ä—É–≥–∞

        # # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –≤ —Ñ–∞–π–ª
        # plt.savefig("–∫—Ä—É–≥–æ–≤–∞—è_–¥–∏–∞–≥—Ä–∞–º–º–∞.png")

        # # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
        # plt.show()

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂
        total_quantity = sum(sorted_sales.values())

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç—á–µ—Ç–∞
        report_data = {}

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤ —Å–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for product_name, quantity in sorted_sales.items():
            report_data.update({product_name: f"{quantity} —à—Ç."})

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        report_data.update({"–ò—Ç–æ–≥–æ:": f"{total_quantity} —à—Ç."})

        report_data.update(
            {
                "–ú–∞–≥–∞–∑–∏–Ω:": shop_name,
                "–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞:": since[0:10],
                "–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞:": until[0:10],
            }
        )

        return [report_data]

from bd.model import Shop, Products, Documents, Session, Employees, Document, TimeSync
from .util import get_shops_uuid_user_id, last_time, sales_parallel
from pprint import pprint
from arrow import get, utcnow
import plotly.express as px
from io import BytesIO


name = "üßæ üõí –ø—Ä–æ–¥–∞–∂–∏ —Å–µ–≥–æ–¥–Ω—è‚û°Ô∏è".upper()
desc = ""
mime = "image_bytes"


def get_inputs(session: Session):
    return {}


def generate(session: Session):

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö
    shops_id = get_shops_uuid_user_id(session)

    payment_type = {
        "CARD": "–ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π:",
        "ADVANCE": "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–æ–π (–∑–∞—á–µ—Ç–æ–º –∞–≤–∞–Ω—Å–∞):",
        "CASH": "–ù–∞–ª. —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏:",
        "COUNTEROFFER": "–í—Å—Ç—Ä–µ—á–Ω—ã–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º:",
        "CREDIT": "–ü–æ—Å—Ç–æ–ø–ª–∞—Ç–æ–π (–≤ –∫—Ä–µ–¥–∏—Ç):",
        "ELECTRON": "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏:",
        "UNKNOWN": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ. –ü–æ-—É–º–æ–ª—á–∞–Ω–∏—é:",
    }

    since = utcnow().replace(hour=3, minute=00).isoformat()
    until = utcnow().replace(hour=23, minute=00).isoformat()

    total_results_shops = {}
    total_result_data_payments = {}
    result_data = []
    data_last_time = {}
    # pprint(sales_parallel(shops_id, since, until).items())
    for uuid, payments in sales_parallel(shops_id, since, until).items():
        shop_name = Shop.objects(uuid__exact=uuid).only("name").first().name
        time_sync = TimeSync.objects(shop=uuid).only("time").first()
        if time_sync:
            data_last_time.update({f"üï∞Ô∏è –≤—ã–≥. {shop_name}": time_sync.time})
        else:
            data_last_time.update({f"üï∞Ô∏è –≤—ã–≥. {shop_name}": "No data"})

        sales = {"–ú–∞–≥–∞–∑–∏–Ω:": shop_name}

        if payments:
            sum_sales = 0
            for k, v in payments.items():
                sales[payment_type[k]] = f"{v} ‚ÇΩ"
                if payment_type[k] in total_result_data_payments:
                    total_result_data_payments[payment_type[k]] += v
                else:
                    total_result_data_payments[payment_type[k]] = v
                sum_sales += v
            sales["–°—É–º–º–∞:"] = f"{sum_sales} ‚ÇΩ"
            result_data.append(sales)
            total_results_shops.update({shop_name: sum_sales})
    total_result_data_s = {
        "–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞:".upper(): since[0:10],
        "–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞:".upper(): until[0:10],
    }

    total_result_data_s.update(total_result_data_payments)

    total_sum = sum(total_result_data_payments.values())

    total_result_data_s.update(
        {
            "–ò—Ç–æ–≥–æ:".upper(): f"{total_sum} ‚ÇΩ",
        }
    )

    result_data.append(total_result_data_s)
    # pprint(total_result_data_payments)
    # pprint(total_results_shops)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂
    payments_names = list(total_result_data_payments.keys())
    sum_payments = list(total_result_data_payments.values())

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è –æ–±—â–∏—Ö –ø—Ä–æ–¥–∞–∂ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    fig = px.pie(
        names=list(total_results_shops.keys()),  # –ù–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫—Ä—É–≥–∞
        values=list(total_results_shops.values()),  # –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É
        title="–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º",  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–Ω–µ—à–Ω–µ–≥–æ –∫—Ä—É–≥–∞
        labels={"names": "–ú–∞–≥–∞–∑–∏–Ω—ã", "values": "–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏"},  # –ú–µ—Ç–∫–∏ –æ—Å–µ–π
    )

    # –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –¥–æ–ª–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    inner_trace = px.pie(
        names=payments_names,  # –ù–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫—Ä—É–≥–∞
        values=sum_payments,  # –í—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É
        hole=0.9,  # –†–∞–∑–º–µ—Ä –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫—Ä—É–≥–∞
        title="–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º",  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫—Ä—É–≥–∞
        labels={"names": "–ú–∞–≥–∞–∑–∏–Ω—ã", "values": "–í—ã—Ä—É—á–∫–∞"},  # –ú–µ—Ç–∫–∏ –æ—Å–µ–π
    ).update_traces(
        hoverinfo="label+value+percent",  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        textinfo="percent",  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—Ç–æ—Ä–æ–≤
        textposition="inside",  # –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—Ç–æ—Ä–æ–≤
        insidetextfont=dict(
            family="Arial", size=18, color="black"
        ),  # –®—Ä–∏—Ñ—Ç –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—Ç–æ—Ä–æ–≤
        outsidetextfont=dict(
            family="Arial", size=18, color="darkgrey"
        ),  # –®—Ä–∏—Ñ—Ç —Å–Ω–∞—Ä—É–∂–∏ —Å–µ–∫—Ç–æ—Ä–æ–≤
        marker=dict(
            line=dict(color="white", width=1)
        ),  # –¶–≤–µ—Ç –∏ —Ç–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏ –≤–æ–∫—Ä—É–≥ —Å–µ–∫—Ç–æ—Ä–æ–≤
    )

    fig.add_trace(inner_trace["data"][0])  # –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥ –∫–∞–∫ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    fig.update_layout(
        title="<b>–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º<b>",  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–≥—Ä–∞–º–º—ã (–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç)
        font=dict(
            size=18, family="Arial, sans-serif", color="black"
        ),  # –®—Ä–∏—Ñ—Ç –∏ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        showlegend=True,  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–µ–≥–µ–Ω–¥—É
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –≤ –æ–±—ä–µ–∫—Ç BytesIO
    image_buffer = BytesIO()
    fig.write_image(image_buffer, format="png", width=900, height=900)

    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
    image_buffer.seek(0)

    result_data.append(data_last_time)
    return result_data, image_buffer

    # # –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    # x_type = ["CLOSE_SESSION", "PAYBACK"]

    # # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
    # sales_data = {}
    # dict_last_time = {}
    # for shop_id in shops_id:
    #     dict_last_time.update(last_time(shop_id))
    #     sum_sales = 0
    #     # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ shop.name
    #     shop = Shop.objects(uuid=shop_id).only("name").first()

    #     documents_sales: Document = Documents.objects(
    #         __raw__={
    #             "closeDate": {"$gte": since, "$lt": until},
    #             "shop_id": shop_id,
    #             "x_type": "SELL",
    #         }
    #     )

    #     # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
    #     for doc in documents_sales:
    #         sum_sales += float(doc["closeResultSum"])

    #         # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤ —Å–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    #     if sum_sales > 0:
    #         sales_data.update({f"{shop.name}".upper(): sum_sales})

    # report_data = {
    #     "–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞:".upper(): since[0:10],
    #     "–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞:".upper(): until[0:10],
    # }
    # for k, v in sales_data.items():
    #     report_data.update({k: f"{v}‚ÇΩ"})

    # # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂
    # shop_names = list(sales_data.keys())
    # sum_sales_ = list(sales_data.values())
    # # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    # fig = px.pie(
    #     names=shop_names,
    #     values=sum_sales_,
    #     title="–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º",
    #     labels={"names": "–ú–∞–≥–∞–∑–∏–Ω—ã", "values": "–í—ã—Ä—É—á–∫–∞"},
    #     # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    # )

    # # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    # fig.update_layout(
    #     title="–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º",
    #     font=dict(size=18, family="Arial, sans-serif", color="black"),
    #     # plot_bgcolor="black",  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    # )

    # # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –≤ –æ–±—ä–µ–∫—Ç BytesIO
    # image_buffer = BytesIO()

    # fig.write_image(image_buffer, format="png", width=900, height=900)

    # # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
    # image_buffer.seek(0)

    # # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–∂
    # total_sales = sum(sum_sales_)

    # # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
    # report_data.update({"–ò—Ç–æ–≥–æ –≤—ã—Ä—É—á–∫–∞:".upper(): f"{total_sales}‚ÇΩ"})

    # # last_time = (
    # #     Documents.objects(
    # #         __raw__={
    # #             "closeDate": {"$gte": since, "$lt": until},
    # #         }
    # #     )
    # #     .order_by("-closeDate")
    # #     .only("closeDate")
    # #     .first()
    # # )
    # # if last_time:
    # #     time = get(last_time.closeDate).shift(hours=3).isoformat()[11:19]
    # # else:
    # #     time = 0

    # # report_data.update(
    # #     {
    # #         "üï∞Ô∏è –í—Ä–µ–º—è –≤—ã–≥—Ä—É–∑–∫–∏ ->".upper(): time,
    # #     }
    # # )

    # # plt.close()
    # return [report_data, dict_last_time], image_buffer

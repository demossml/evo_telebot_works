# –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –≥—Ä—É–ø–ø–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—Å–µ–º –º–∞–≥–∞–∑–∏–Ω–∞–º –≤ —Ä—É–±.
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞:
# - shop_id, id –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (–∑–∞–≥—Ä—É–∑–∏—Ç—å id –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ –±–∞–∑—ã tc)
# - group_id, id –≥—Ä—É–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ (–∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã tc)
# - period, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (–¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è,  –¥–≤–µ –Ω–µ–¥–µ–ª–∏, –º–µ—Å—è—Ü)

from bd.model import Session, Shop, Plan, Products, Documents, TimeSync
from arrow import utcnow, get
from pprint import pprint
from .util import (
    last_time,
    get_shops_in,
    generate_plan,
    generate_plan_,
    get_shops_user_id,
    get_shops_uuid_user_id,
    get_plan,
    analyze_sales_parallel,
)
import plotly.express as px
from io import BytesIO
import time
import concurrent.futures
from collections import defaultdict

name = "üíπ –ü–ª–∞–Ω –ø–æ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º ‚û°Ô∏è".upper()
desc = "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –≤ —à—Ç. –ø–æ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –∑–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
mime = "image_bytes"


def get_inputs(session: Session):
    return {}


def generate(session: Session) -> list[dict]:
    start_time = time.time()

    # # –ì—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂
    # group_id = (
    #     "78ddfd78-dc52-11e8-b970-ccb0da458b5a",
    #     "bc9e7e4c-fdac-11ea-aaf2-2cf05d04be1d",
    #     "0627db0b-4e39-11ec-ab27-2cf05d04be1d",
    #     "2b8eb6b4-92ea-11ee-ab93-2cf05d04be1d",
    #     "8a8fcb5f-9582-11ee-ab93-2cf05d04be1d",
    #     "97d6fa81-84b1-11ea-b9bb-70c94e4ebe6a",
    #     "ad8afa41-737d-11ea-b9b9-70c94e4ebe6a",
    #     "568905bd-9460-11ee-9ef4-be8fe126e7b9",
    #     "568905be-9460-11ee-9ef4-be8fe126e7b9",
    # )

    # # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    # since_2 = utcnow().replace(hour=3, minute=00).isoformat()
    # until_2 = utcnow().isoformat()

    # _dict_2 = {}
    # # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    # sales_data = {}
    # dict_last_time = {}
    # for shop in get_shops_user_id(session):
    #     dict_last_time.update(last_time(shop["uuid"]))
    #     since = utcnow().replace(hour=3, minute=00).isoformat()
    #     until = utcnow().replace(hour=20, minute=59).isoformat()

    #     # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞–Ω–∞—Ö –ø—Ä–æ–¥–∞–∂ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
    #     plan_ = Plan.objects(
    #         __raw__={
    #             "closeDate": {"$gte": since, "$lt": until},
    #             "shop_id": shop["uuid"],
    #         }
    #     )
    #     # pprint(plan_)
    #     if len(plan_) > 0:
    #         # pprint(1)
    #         plan = Plan.objects(
    #             __raw__={
    #                 "closeDate": {"$gte": since, "$lt": until},
    #                 "shop_id": shop["uuid"],
    #             }
    #         ).first()
    #     else:
    #         generate_plan()

    #         plan = Plan.objects(
    #             __raw__={
    #                 "closeDate": {"$gte": since, "$lt": until},
    #                 "shop_id": shop["uuid"],
    #             }
    #         ).first()

    #     # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –≥—Ä—É–ø–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤
    #     products = Products.objects(
    #         __raw__={"shop_id": shop["uuid"], "parentUuid": {"$in": group_id}}
    #     )

    #     # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    #     products_uuid = [element.uuid for element in products]

    #     # –¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø—Ä–æ–¥–∞–∂–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã)
    #     x_type = ("SELL", "PAYBACK")

    #     # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞—Ö –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    #     documents_2 = Documents.objects(
    #         __raw__={
    #             "closeDate": {"$gte": since_2, "$lt": until_2},
    #             "shop_id": shop["uuid"],
    #             "x_type": {"$in": x_type},
    #             "transactions.commodityUuid": {"$in": products_uuid},
    #         }
    #     )

    #     sum_sell_today = 0
    #     # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂ –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
    #     for doc_2 in documents_2:
    #         for trans_2 in doc_2["transactions"]:
    #             if trans_2["x_type"] == "REGISTER_POSITION":
    #                 if trans_2["commodityUuid"] in products_uuid:
    #                     sum_sell_today += trans_2["sum"]

    #     if sum_sell_today > 0:
    #         sales_data.update({shop["name"]: sum_sell_today})

    #     # pprint(sales_data)

    #     # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
    #     if int(sum_sell_today) >= int(plan.sum):
    #         symbol = "‚úÖ"
    #     else:
    #         symbol = "üî¥"

    #     # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–∞—Ö –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–¥–∞–∂–∞—Ö

    #     _dict_2[
    #         "{}{}".format(symbol, shop["name"][:9]).upper()
    #     ] = "–ø–ª.{}‚ÇΩ/–ø—Ä.{}‚ÇΩ".format(int(plan.sum), int(sum_sell_today))
    # # end_time = time.time()
    # # execution_time = end_time - start_time
    # # print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ sync_evo: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")

    # # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂
    # shop_names = list(sales_data.keys())
    # sum_sales_ = list(sales_data.values())
    # # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    # fig = px.pie(
    #     names=shop_names,
    #     values=sum_sales_,
    #     title="–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏ –ø–æ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º  –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º",
    #     labels={"names": "–ú–∞–≥–∞–∑–∏–Ω—ã", "values": "–í—ã—Ä—É—á–∫–∞"},
    #     # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    # )

    # # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    # fig.update_layout(
    #     title="–ü—Ä–æ–¥–∞–∂–∏  –ø–æ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º",
    #     font=dict(size=18, family="Arial, sans-serif", color="black"),
    #     # plot_bgcolor="black",  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    # )

    # # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –≤ –æ–±—ä–µ–∫—Ç BytesIO
    # image_buffer = BytesIO()

    # fig.write_image(image_buffer, format="png", width=700, height=700)

    # # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
    # image_buffer.seek(0)
    # end_time = time.time()
    # execution_time = end_time - start_time
    # print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ sync_evo: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
    # return [_dict_2, dict_last_time], image_buffer

    data_resul = {}
    data_sale = analyze_sales_parallel(session)
    # pprint(data_sale)
    sales_data = {}
    data_last_time = {}
    for k, v in data_sale.items():
        plan = get_plan(k)
        # pprint(plan)
        if v >= plan.sum:
            symbol = "‚úÖ"
        else:
            symbol = "üî¥"

        shop = Shop.objects(uuid__exact=k).only("name").first()

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–∞—Ö –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–¥–∞–∂–∞—Ö
        data_resul[
            "{}{}".format(symbol, shop.name[:9]).upper()
        ] = "–ø–ª.{}‚ÇΩ/–ø—Ä.{}‚ÇΩ".format(plan.sum, v)

        sales_data[shop.name] = v
        time_sync = TimeSync.objects(shop=k).only("time").first()
        if time_sync:
            data_last_time.update({f"üï∞Ô∏è –≤—ã–≥. {shop.name}": time_sync.time})
        else:
            data_last_time.update({f"üï∞Ô∏è –≤—ã–≥. {shop.name}": "No data"})
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂
    shop_names = list(sales_data.keys())
    sum_sales_ = list(sales_data.values())

    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    fig = px.pie(
        names=shop_names,
        values=sum_sales_,
        title="–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏ –ø–æ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º  –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º",
        labels={"names": "–ú–∞–≥–∞–∑–∏–Ω—ã", "values": "–í—ã—Ä—É—á–∫–∞"},
        # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    fig.update_layout(
        title="–ü—Ä–æ–¥–∞–∂–∏  –ø–æ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º",
        font=dict(size=18, family="Arial, sans-serif", color="black"),
        # plot_bgcolor="black",  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –≤ –æ–±—ä–µ–∫—Ç BytesIO
    image_buffer = BytesIO()

    fig.write_image(image_buffer, format="png", width=700, height=700)

    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
    image_buffer.seek(0)
    end_time = time.time()
    execution_time = end_time - start_time
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ sync_evo: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")

    return [data_resul, data_last_time], image_buffer

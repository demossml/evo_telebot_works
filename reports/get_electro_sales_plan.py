# –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –≥—Ä—É–ø–ø–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—Å–µ–º –º–∞–≥–∞–∑–∏–Ω–∞–º –≤ —Ä—É–±.
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞:
# - shop_id, id –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (–∑–∞–≥—Ä—É–∑–∏—Ç—å id –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ –±–∞–∑—ã tc)
# - group_id, id –≥—Ä—É–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ (–∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã tc)
# - period, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (–¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è,  –¥–≤–µ –Ω–µ–¥–µ–ª–∏, –º–µ—Å—è—Ü)

from bd.model import Session, Shop, Plan, Products, Documents, TimeSync, Status
from pprint import pprint
from .util import (
    get_plan,
    analyze_sales_parallel,
)
import plotly.express as px
from io import BytesIO
import time
import concurrent.futures
from collections import defaultdict

name = "üíπ –ü–ª–∞–Ω –ø–æ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º ‚û°Ô∏è".upper()
desc = "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –≤ —à—Ç. –ø–æ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –∑–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
mime = "image_bytes"


def get_inputs(session: Session):
    return {}


def generate(session: Session) -> list[dict]:
    start_time = time.time()

    data_resul = {}
    data_sale = analyze_sales_parallel(session)
    pprint(data_sale)
    sales_data = {}
    data_last_time = {}
    for k, v in data_sale.items():
        doc_status = Status.objects(shop=k, status="deleted").first()
        if not doc_status:
            plan = get_plan(k)
            # pprint(plan)
            if v >= plan.sum:
                symbol = "‚úÖ"
            else:
                symbol = "üî¥"

            shop = Shop.objects(uuid__exact=k).only("name").first()

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–∞—Ö –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–¥–∞–∂–∞—Ö
            data_resul["{}{}".format(symbol, shop.name[:9]).upper()] = (
                "–ø–ª.{}‚ÇΩ/–ø—Ä.{}‚ÇΩ".format(plan.sum, v)
            )

            sales_data[shop.name] = v
            time_sync = TimeSync.objects(shop=k).only("time").first()
            if time_sync:
                data_last_time.update({f"üï∞Ô∏è –≤—ã–≥. {shop.name}": time_sync.time})
            else:
                data_last_time.update({f"üï∞Ô∏è –≤—ã–≥. {shop.name}": "No data"})
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂
    shop_names = list(sales_data.keys())
    sum_sales_ = list(sales_data.values())

    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    fig = px.pie(
        names=shop_names,
        values=sum_sales_,
        title="–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏ –ø–æ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º  –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º",
        labels={"names": "–ú–∞–≥–∞–∑–∏–Ω—ã", "values": "–í—ã—Ä—É—á–∫–∞"},
        # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    fig.update_layout(
        title="–ü—Ä–æ–¥–∞–∂–∏  –ø–æ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º",
        font=dict(size=18, family="Arial, sans-serif", color="black"),
        # plot_bgcolor="black",  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –≤ –æ–±—ä–µ–∫—Ç BytesIO
    image_buffer = BytesIO()

    fig.write_image(image_buffer, format="png", width=700, height=700)

    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
    image_buffer.seek(0)
    end_time = time.time()
    execution_time = end_time - start_time
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ sync_evo: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")

    return [data_resul, data_last_time], image_buffer

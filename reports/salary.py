from bd.model import (
    Shop,
    Products,
    Documents,
    Session,
    Employees,
    GroupUuidAks,
    Plan,
    Document,
)
from .util import (
    get_shops_uuid_user_id,
    get_period,
    get_shops,
    get_intervals,
    get_total_salary,
    get_period_day,
    generate_plan,
)
from pprint import pprint
from collections import OrderedDict
import matplotlib.pyplot as plt
from .inputs import (
    GroupsInput,
    DocStatusInput,
    ReportSalaryInput,
    ReportsSalarySettingInput,
    ReportGroupUuidAccessoryInput,
    ShopInput,
    ReportMotivationUuidInput,
    GroupInput,
    ProductInput,
    Report–êssignSalaryInput,
    ReportMotivationInput,
    EmployeesInput,
    ReportSurchargeInput,
    PeriodDateInput,
    OpenDatePastInput,
    CloseDatePastInput,
)

from arrow import utcnow, get
import decimal
import concurrent.futures
from collections import defaultdict
from pprint import pprint


name = "üõí –ó–∞—Ä–ø–ª–∞—Ç–∞ ‚û°Ô∏è".upper()
desc = ""
mime = "text"


class MotivationInput:
    """
    –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ ‚Ç±
    """

    desc = "–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ ‚Ç±".upper()
    type = "MESSAGE"


class MotivationUuidInput:
    desc = "–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –º–æ—Ç–∏–≤–∞—Ü–∏–∏ ‚Ç±".upper()
    type = "MESSAGE"


class SalaryInput:
    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –æ–∫–ª–∞–¥ ‚Ç±".upper()
    type = "MESSAGE"


class EmployeesSurchargeInput:
    desc = "–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –¥–æ–ø–ª–∞—Ç—ã ‚Ç±".upper()
    type = "MESSAGE"


def get_inputs(session: Session):
    # –ü–µ—Ä–∏–æ–¥—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    period = ["day", "week", "fortnight", "month"]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –≤—Ö–æ–¥–∞—Ö –≤ —Å–µ—Å—Å–∏–∏
    if session.params["inputs"]["0"]:
        # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç
        if session.params["inputs"]["0"]["reports"] == "setting":
            if "reports_salary-setting" in session.params["inputs"]["0"]:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä—É–ø–ø –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
                if (
                    session.params["inputs"]["0"]["reports_salary-setting"]
                    == "group_uuid_accessory"
                ):
                    if "report" in session.params["inputs"]["0"]:
                        # –ù–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—ã –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
                        if (
                            session.params["inputs"]["0"]["report"]
                            == "assigning_group_uuid_accessory"
                        ):
                            return {
                                "parentUuid": GroupsInput,
                                "docStatus": DocStatusInput,
                            }
                        # –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
                        if (
                            session.params["inputs"]["0"]["report"]
                            == "get_group_uuid_accessory"
                        ):
                            return {
                                "shop": ShopInput,
                            }
                    else:
                        return {"report": ReportGroupUuidAccessoryInput}
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                if (
                    session.params["inputs"]["0"]["reports_salary-setting"]
                    == "motivation_uuid_accessory"
                ):
                    if "report" in session.params["inputs"]["0"]:
                        # –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–æ–±. –º–æ—Ç–∏–≤–∞—Ü–∏–∏
                        if (
                            session.params["inputs"]["0"]["report"]
                            == "product_ext_motivation"
                        ):
                            if "parentUuid" in session.params["inputs"]["0"]:
                                # –æ—Ç–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–ø—É—Ç–æ–≤
                                return {
                                    "uuid": ProductInput,
                                    "motivation": MotivationUuidInput,
                                    "docStatus": DocStatusInput,
                                }
                            else:
                                return {"parentUuid": GroupInput}
                        # –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–±. –º–æ—Ç–∏–≤–∞—Ü–∏–∏
                        if (
                            session.params["inputs"]["0"]["report"]
                            == "get_product_ext_motivation"
                        ):
                            return {
                                "shop": ShopInput,
                            }
                    else:
                        return {"report": ReportMotivationUuidInput}
                # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–∫–ª–∞–¥–æ–≤ –Ω–∞ –¢–¢
                if (
                    session.params["inputs"]["0"]["reports_salary-setting"]
                    == "assigning_salary"
                ):
                    if "report" in session.params["inputs"]["0"]:
                        # –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ–∫–ª–∞–¥—ã –Ω–∞ –¢–¢
                        if (
                            session.params["inputs"]["0"]["report"]
                            == "assigning_salary_"
                        ):
                            return {
                                "shop": ShopInput,
                                "salary": SalaryInput,
                                "docStatus": DocStatusInput,
                            }
                        # –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –æ–∫–ª–∞–¥–æ–≤
                        if session.params["inputs"]["0"]["report"] == "get_salary":
                            return {
                                "shop": ShopInput,
                            }
                    else:
                        return {"report": Report–êssignSalaryInput}
                # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—É–º–º—ã –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞ –≤—ã–ø. –ø–ª–∞–Ω–∞
                if (
                    session.params["inputs"]["0"]["reports_salary-setting"]
                    == "motivation"
                ):
                    if "report" in session.params["inputs"]["0"]:
                        # –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—É–º. –∑–∞ –≤—ã–ø–æ–ª. –ø–ª.
                        if (
                            session.params["inputs"]["0"]["report"]
                            == "amount_of_motivation"
                        ):
                            return {
                                "shop": ShopInput,
                                "motivation": MotivationInput,
                                "docStatus": DocStatusInput,
                            }
                        # –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Å—É–º. –∑–∞ –≤—ã–ø–æ–ª. –ø–ª.
                        if (
                            session.params["inputs"]["0"]["report"]
                            == "get_amount_of_motivation"
                        ):
                            return {"shop": ShopInput}
                    else:
                        return {"report": ReportMotivationInput}
                # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—É–º. –¥–æ–ø–ª–∞—Ç—É –∫ –∑–ø.
                if (
                    session.params["inputs"]["0"]["reports_salary-setting"]
                    == "surcharge"
                ):
                    if "report" in session.params["inputs"]["0"]:
                        # –ù–∞–∑–Ω–∞—á–∏—Ç—å –¥–æ–ø–ª–∞—Ç—É –∫ –∑–ø
                        if (
                            session.params["inputs"]["0"]["report"]
                            == "assign_a_surcharge"
                        ):
                            return {
                                "uuid": EmployeesInput,
                                "surcharge": EmployeesSurchargeInput,
                                "docStatus": DocStatusInput,
                            }
                        # –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Å—É–º. –¥–æ–ø–ª–∞—Çs –∫ –∑–ø
                        if session.params["inputs"]["0"]["report"] == "get_surcharge":
                            return {
                                "employee_uuid": EmployeesInput,
                            }
                    else:
                        return {"report": ReportSurchargeInput}

            else:
                return {
                    "reports_salary-setting": ReportsSalarySettingInput,
                }
        # –ó–∞–ø—Ä–æ—Å –ó–ü –ø–æ –≥—Ä—É–ø. –∞–∫—Å. –ø–æ –æ–¥–ª–Ω–æ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
        if session.params["inputs"]["0"]["reports"] == "get_salary_aks":
            return {
                "employee_uuid": EmployeesInput,
                "period": PeriodDateInput,
                "openDate": OpenDatePastInput,
                "closeDate": CloseDatePastInput,
            }
        # –ó–∞–ø—Ä–æ—Å –ó–ü –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. –ø–ª–∞–Ω–∞ –ø–æ –æ–¥–ª–Ω–æ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
        if session.params["inputs"]["0"]["reports"] == "get_salary_plan_day":
            return {
                "employee_uuid": EmployeesInput,
                "period": PeriodDateInput,
                "openDate": OpenDatePastInput,
                "closeDate": CloseDatePastInput,
            }
        # –ó–∞–ø—Ä–æ—Å –ó–ü –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. –ø–ª–∞–Ω–∞ –ø–æ –æ–¥–ª–Ω–æ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
        if session.params["inputs"]["0"]["reports"] == "get_salary_day":
            return {
                "employee_uuid": EmployeesInput,
                "period": PeriodDateInput,
                "openDate": OpenDatePastInput,
                "closeDate": CloseDatePastInput,
            }

        if session.params["inputs"]["0"]["reports"] == "get_salary_motivation_uuid":
            return {
                "employee_uuid": EmployeesInput,
                "period": PeriodDateInput,
                "openDate": OpenDatePastInput,
                "closeDate": CloseDatePastInput,
            }

        # –ó–ü –ò–¢–û–ì–û
        if session.params["inputs"]["0"]["reports"] == "get_salary_total":
            if "period" in session.params["inputs"]["0"]:
                if session.params["inputs"]["0"]["period"] == "day":
                    return {}
                if session.params["inputs"]["0"]["period"] not in period:
                    return {"openDate": OpenDatePastInput}
                else:
                    return {
                        "openDate": OpenDatePastInput,
                        "closeDate": CloseDatePastInput,
                    }
            else:
                return {
                    "employee_uuid": EmployeesInput,
                    "period": PeriodDateInput,
                }
        #
        if session.params["inputs"]["0"]["reports"] == "get_salary_total_day":
            if "period" in session.params["inputs"]["0"]:
                if session.params["inputs"]["0"]["period"] == "day":
                    return {}
                if session.params["inputs"]["0"]["period"] not in period:
                    return {"openDate": OpenDatePastInput}
                else:
                    return {
                        "openDate": OpenDatePastInput,
                        # "closeDate": CloseDatePastInput,
                    }
            else:
                return {
                    "period": PeriodDateInput,
                }

    else:
        return {"reports": ReportSalaryInput}


def generate(session: Session):
    pprint(session.params["inputs"]["0"])
    params = session.params["inputs"]["0"]
    user_id = session.user_id
    room = session["room"]

    # –ù–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—ã –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
    if "report" in params:
        if params["report"] == "assigning_group_uuid_accessory":
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            shops_id = get_shops_uuid_user_id(session)
            # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö UUID
            parentUuids = []

            # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
            for i in range(int(room) + 1):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ "parentUuid" –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∫–æ–º–Ω–∞—Ç—ã i
                if "parentUuid" in session.params["inputs"][str(i)]:
                    # –î–æ–±–∞–≤–ª—è–µ–º "parentUuid" –≤ —Å–ø–∏—Å–æ–∫
                    parentUuids.append(session.params["inputs"][str(i)]["parentUuid"])

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO
            close_date = utcnow().isoformat()[:10]

            # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º –º–∞–≥–∞–∑–∏–Ω–æ–≤
            for shop_id in shops_id:
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                dict_ = {
                    "shop_id": shop_id,
                    "closeDate": close_date,
                    "parentUuids": parentUuids,
                    "user_id": user_id,
                    "x_type": "MOTIVATION_PARENT_UUID",
                }

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                GroupUuidAks.objects(
                    shop_id=shop_id,
                    closeDate=close_date,
                    x_type="MOTIVATION_PARENT_UUID",
                ).update(**dict_, upsert=True)

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ –∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
            shops = Shop.objects(uuid__in=shops_id).only("name")

            shop_name = ""

            # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
            for shop in shops:
                shop_name += "{}, ".format(shop.name)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π
            result = [
                {"–î–ê–¢–ê:": close_date},
                {"–ì–†–£–ü–ü–´:": "–ó–ü –ê–ö–°"},
                {"–ú–ê–ì–ê–ó–ò–ù(–´):".upper(): shop_name},
            ]

            number_ = 1

            # –ù—É–º–µ—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ UUID
            for uuid in parentUuids:
                products = Products.objects(group=True, uuid=uuid).first()
                result.append({"{}:".format(number_): products.name})
                number_ += 1

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return result
        # –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
        if params["report"] == "get_group_uuid_accessory":
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö
            shops = get_shops(session)
            shop_id_ = shops["shop_id"]
            shop_name = shops["shop_name"]

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –≥—Ä—É–ø–ø–æ–≤—ã–º UUID —Å —Ç–∏–ø–æ–º "MOTIVATION_PARENT_UUID"
            documents = (
                GroupUuidAks.objects(
                    shop_id=shop_id_[0], x_type="MOTIVATION_PARENT_UUID"
                )
                .order_by("-closeDate")
                .first()
            )

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ parentUuid
            products = Products.objects(group=True, uuid__in=documents.parentUuids)

            result = [{"–ú–ê–ì–ê–ó–ò–ù": shop_name}]
            number_ = 1
            uuid = []
            for prod in products:
                if prod["uuid"] not in uuid:
                    result.append({"{}".format(number_): prod["name"]})
                    uuid.append(prod["uuid"])
                    number_ += 1
            return result

        # –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–æ–±. –º–æ—Ç–∏–≤–∞—Ü–∏–∏
        if params["report"] == "product_ext_motivation":
            # –ü–æ–ª—É—á–∞–µ–º UUID –º–∞–≥–∞–∑–∏–Ω–æ–≤
            shops_id = get_shops_uuid_user_id(session)

            motivationUuids = {}

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ UUID –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            for i in range(int(room) + 1):
                # –µ—Å–ª–∏ –≤ 'uuid' –µ—Å—Ç—å –≤ session.params["inputs"][str(i)]
                if "uuid" in session.params["inputs"][str(i)]:
                    # –µ—Å–ª–∏ 'uuid' –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∫–ª—é—á–µ–º i –≤ —Å–ø–∏—Å–∫–µ uuid
                    motivationUuids.update(
                        {
                            session.params["inputs"][str(i)]["uuid"]: int(
                                session.params["inputs"][str(i)]["motivation"]
                            )
                        }
                    )
            print(motivationUuids)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO
            close_date = utcnow().isoformat()[:10]

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã GroupUuidAks –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
            for shop_id in shops_id:
                dict_ = {
                    "closeDate": close_date,
                    "uuid": motivationUuids,
                    "user_id": user_id,
                    "x_type": "MOTIVATION_UUID",
                }

                GroupUuidAks.objects(
                    shop_id=shop_id, closeDate=close_date, x_type="MOTIVATION_UUID"
                ).update(**dict_, upsert=True)

            # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
            shops = Shop.objects(uuid__in=shops_id).only("name")
            shop_name = ""
            for shop in shops:
                shop_name += "{}, ".format(shop.name)

            result = [
                {"–¢–æ–≤–∞—Ä –¥–æ–±. –º–æ—Ç–∏–≤–∞—Ü–∏–∏".upper(): ""},
                {"–ú–ê–ì–ê–ó–ò–ù(–´):".upper(): shop_name},
            ]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
            for uuid, motivation in motivationUuids.items():
                products = Products.objects(group=False, uuid=uuid).first()
                result.append({"{}:".format(products.name): "{}‚Ç±".format(motivation)})

                # pprint(item)
            return result
        # –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–±. –º–æ—Ç–∏–≤–∞—Ü–∏–∏
        if params["report"] == "get_product_ext_motivation":
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ
            shops = get_shops(session)
            shop_id_ = shops["shop_id"]
            shop_name = shops["shop_name"]

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ç–∏–ø–æ–º "MOTIVATION_UUID" –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã–≤—à–µ–π—Å—è –¥–∞—Ç—ã
            documents = (
                GroupUuidAks.objects(shop_id=shop_id_[0], x_type="MOTIVATION_UUID")
                .order_by("-closeDate")
                .first()
            )

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ UUID –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            products = Products.objects(group=False, uuid__in=documents.uuid)

            result = [{"–¢–æ–≤–∞—Ä –¥–æ–±. –º–æ—Ç–∏–≤–∞—Ü–∏–∏".upper(): ""}, {"–ú–ê–ì–ê–ó–ò–ù": shop_name}]

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–∂–¥–æ–º —Ç–æ–≤–∞—Ä–µ –∏ –µ–≥–æ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
            for uuid, motivation in documents.uuid.items():
                products = Products.objects(group=False, uuid=uuid).first()
                result.append({"{}:".format(products.name): "{}‚Ç±".format(motivation)})

            return result

        # –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ–∫–ª–∞–¥—ã –Ω–∞ –¢–¢
        if params["report"] == "assigning_salary_":
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
            close_date = utcnow().isoformat()[:10]
            shop_result = {}
            # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
            for i in range(int(room) + 1):
                # –µ—Å–ª–∏ –≤ 'uuid' –µ—Å—Ç—å –≤ session.params["inputs"][str(i)]

                _dict = {
                    "closeDate": close_date,
                    "salary": int(session.params["inputs"][str(i)]["salary"]),
                    "user_id": user_id,
                    "shop_id": session.params["inputs"][str(i)]["shop"],
                    "x_type": "SALARY",
                }
                pprint(_dict)

                shop_result.update(
                    {session.params["inputs"][str(i)]["shop"]: _dict["salary"]}
                )

                GroupUuidAks.objects(
                    shop_id=_dict["shop_id"], closeDate=close_date, x_type="SALARY"
                ).update(**_dict, upsert=True)

            result = []

            for k, v in shop_result.items():
                shop = Shop.objects(uuid=k).only("name").first()
                result.append({shop.name: "{}‚Ç±".format(v)})

            return result
        # –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –æ–∫–ª–∞–¥–æ–≤
        if params["report"] == "get_salary":
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ
            shops = get_shops(session)
            shop_id_ = shops["shop_id"]
            shop_name = shops["shop_name"]

            documents = (
                GroupUuidAks.objects(shop_id=shop_id_[0], x_type="SALARY")
                .order_by("-closeDate")
                .first()
            )

            result = [
                {"–î–ê–¢–ê:": documents.closeDate},
                {"–û–ö–õ–ê–î:": "{}‚Ç±".format(documents.salary)},
                {"–ú–ê–ì–ê–ó–ò–ù(–´):": shop_name},
            ]
            return result
        # –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—É–º. –∑–∞ –≤—ã–ø–æ–ª. –ø–ª.
        if params["report"] == "amount_of_motivation":
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
            close_date = utcnow().isoformat()[:10]
            _dict = {"motivation": int(params["motivation"])}

            shop_result = {}
            # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
            for i in range(int(room) + 1):
                # –µ—Å–ª–∏ –≤ 'uuid' –µ—Å—Ç—å –≤ session.params["inputs"][str(i)]
                _dict = {
                    "closeDate": close_date,
                    "motivation": int(session.params["inputs"][str(i)]["motivation"]),
                    "user_id": user_id,
                    "shop_id": session.params["inputs"][str(i)]["shop"],
                    "x_type": "MOTIVATION",
                }

                shop_result.update(
                    {session.params["inputs"][str(i)]["shop"]: _dict["motivation"]}
                )

                GroupUuidAks.objects(
                    shop_id=_dict["shop_id"], closeDate=close_date, x_type="MOTIVATION"
                ).update(**_dict, upsert=True)

            result = []
            for k, v in shop_result.items():
                shop = Shop.objects(uuid=k).only("name").first()
                pprint(shop.name)
                result.append({shop.name: "{}‚Ç±".format(v)})

            return result
        # –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –º–æ—Ç–≤–∞—Ü–∏–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
        if params["report"] == "get_amount_of_motivation":
            shops = get_shops(session)
            shop_id_ = shops["shop_id"]
            shop_name = shops["shop_name"]
            documents = (
                GroupUuidAks.objects(shop_id=shop_id_[0], x_type="MOTIVATION")
                .order_by("-closeDate")
                .first()
            )
            if documents:
                return [
                    {"–î–ê–¢–ê:": documents.closeDate},
                    {"–°–£–ú–ú–ê –ú–û–¢–ò–í–ê–¶–ò:": "{}‚Ç±".format(documents.motivation)},
                    {"–ú–ê–ì–ê–ó–ò–ù(–´):": shop_name},
                ]
            else:
                return [{"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö".upper(): ""}]
        # –ù–∞–∑–Ω–∞—á–∏—Ç—å –¥–æ–ø–ª–∞—Ç—É –∫ –∑–ø
        if params["report"] == "assign_a_surcharge":
            close_date = utcnow().isoformat()[:10]
            employee_result = {}
            for i in range(int(room) + 1):
                _dict = {
                    "closeDate": close_date,
                    "employee_uuid": session.params["inputs"][str(i)]["uuid"],
                    "user_id": user_id,
                    "surcharge": int(session.params["inputs"][str(i)]["surcharge"]),
                    "x_type": "ASSING_A_SURCHARGE",
                }
                employee_result.update(
                    {
                        session.params["inputs"][str(i)]["uuid"]: session.params[
                            "inputs"
                        ][str(i)]["surcharge"]
                    }
                )
                GroupUuidAks.objects(
                    employee_uuid=session.params["inputs"][str(i)]["uuid"],
                    closeDate=close_date,
                    x_type="ASSING_A_SURCHARGE",
                ).update(**_dict, upsert=True)

            result = []
            for k, v in employee_result.items():
                employee = Employees.objects(lastName=k).only("name").first()
                result.append({"{}:".format(employee.name): "{}‚Ç±".format(v)})

            return result
        # –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Å—É–º. –¥–æ–ø–ª–∞—Ç –∫ –∑–ø
        if params["report"] == "get_surcharge":
            employee_uuid = params["employee_uuid"]
            employee = Employees.objects(lastName=employee_uuid).only("name").first()
            documents = (
                GroupUuidAks.objects(
                    employee_uuid=employee_uuid, x_type="ASSING_A_SURCHARGE"
                )
                .order_by("-closeDate")
                .first()
            )

            if documents:
                return [
                    {"–î–ê–¢–ê:": documents.closeDate},
                    {"–°–£–ú–ú–ê –î–û–ü–õ–ê–¢–´:": "{}‚Ç±".format(documents.surcharge)},
                    {"–°–û–¢–†–£–î–ù–ò–ö:": employee.name},
                ]
            else:
                return [{"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö".upper(): ""}]
    else:
        # –ó–∞–ø—Ä–æ—Å –ó–ü –ø–æ –≥—Ä—É–ø. –∞–∫—Å. –ø–æ –æ–¥–ª–Ω–æ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
        if params["reports"] == "get_salary_aks":
            result = []

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            employee_last_name = params["employee_uuid"]

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ uuid —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ñ–∞–º–∏–ª–∏–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user = [
                element.uuid
                for element in Employees.objects(lastName=employee_last_name)
            ]
            pprint(user)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
            period = get_period(session)
            since = period["since"]
            until = period["until"]

            # –†–∞–∑–±–∏–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–Ω–µ–π
            intervals = get_intervals(since, until, "days", 1)

            # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
            for since_, until_ in intervals:
                documents_open_session = Documents.objects(
                    __raw__={
                        "closeDate": {"$gte": since_, "$lt": until_},
                        "openUserUuid": {"$in": user},
                        "x_type": "OPEN_SESSION",
                    }
                ).first()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–µ—Å—Å–∏–∏
                if documents_open_session:
                    shop = (
                        Shop.objects(uuid=documents_open_session.shop_id)
                        .only("name")
                        .first()
                    )

                    documents_aks = (
                        GroupUuidAks.objects(
                            __raw__={
                                "closeDate": {"$lte": until_[:10]},
                                "shop_id": documents_open_session.shop_id,
                                "x_type": "MOTIVATION_PARENT_UUID",
                            }
                        )
                        .order_by("-closeDate")
                        .first()
                    )

                    group = Products.objects(
                        __raw__={
                            "shop_id": documents_open_session.shop_id,
                            # 'group': True,
                            "parentUuid": {"$in": documents_aks.parentUuids},
                        }
                    )

                    products_uuid = [i.uuid for i in group]

                    documents_sale = Documents.objects(
                        __raw__={
                            "closeDate": {"$gte": since, "$lt": until},
                            "shop_id": documents_open_session.shop_id,
                            "x_type": "SELL",
                            "transactions.commodityUuid": {"$in": products_uuid},
                        }
                    )
                    _dict = {}
                    sum_sales = 0
                    for doc in documents_sale:
                        for trans in doc["transactions"]:
                            if trans["x_type"] == "REGISTER_POSITION":
                                if trans["commodityUuid"] in products_uuid:
                                    if trans["commodityName"] in _dict:
                                        _dict[trans["commodityName"]] += trans["sum"]
                                        sum_sales += trans["sum"]
                                    else:
                                        _dict[trans["commodityName"]] = trans["sum"]
                                        sum_sales += trans["sum"]
                    _dict = dict(
                        OrderedDict(sorted(_dict.items(), key=lambda t: -t[1]))
                    )
                    _dict_total = {}
                    for k, v in _dict.items():
                        _dict_total[k] = "{}‚ÇΩ".format(v)

                    _dict_total.update(
                        {
                            "–°–£–ú–ú–ê:": "{}‚ÇΩ".format(sum_sales),
                            "–ü–†–û–¶–ï–ù–¢:": "5%",
                            "–ó–ü": "{}‚ÇΩ".format(
                                round(int(sum_sales / 100 * 5) / 10) * 10
                            ),
                            "–î–ê–¢–ê:": since[:10],
                            "–ú–ê–ì–ê–ó–ò–ù": shop.name,
                        }
                    )
                    result.append(_dict_total)

            return result
        # –ó–∞–ø—Ä–æ—Å –ó–ü –∑–∞ –º–æ—Ç–∏–≤. —Ç–æ–≤–∞—Ä –ø–æ –æ–¥–ª–Ω–æ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
        if params["reports"] == "get_salary_motivation_uuid":
            result = []
            employee_last_name = params["employee_uuid"]
            user = [
                element.uuid
                for element in Employees.objects(lastName=employee_last_name)
            ]
            pprint(user)

            period = get_period(session)
            since = period["since"]
            until = period["until"]

            intervals = get_intervals(since, until, "days", 1)
            for since_, until_ in intervals:
                documents_open_session = Documents.objects(
                    __raw__={
                        "closeDate": {"$gte": since_, "$lt": until_},
                        "openUserUuid": {"$in": user},
                        "x_type": "OPEN_SESSION",
                    }
                ).first()
                if documents_open_session:
                    shop = (
                        Shop.objects(uuid=documents_open_session.shop_id)
                        .only("name")
                        .first()
                    )

                    documents_mot = (
                        GroupUuidAks.objects(
                            __raw__={
                                "closeDate": {"$lte": until_[:10]},
                                "shop_id": documents_open_session.shop_id,
                                "x_type": "MOTIVATION_UUID",
                            }
                        )
                        .order_by("-closeDate")
                        .first()
                    )
                    if documents_mot:
                        products_uuid = [k for k, v in documents_mot.uuid.items()]

                        documents_sale = Documents.objects(
                            __raw__={
                                "closeDate": {"$gte": since_, "$lt": until_},
                                "shop_id": documents_open_session.shop_id,
                                "x_type": "SELL",
                                "transactions.commodityUuid": {"$in": products_uuid},
                            }
                        )
                        dict_salary = {}
                        sum_mot = 0
                        for doc in documents_sale:
                            for trans in doc["transactions"]:
                                if trans["x_type"] == "REGISTER_POSITION":
                                    if trans["commodityUuid"] in products_uuid:
                                        if trans["commodityUuid"] in dict_salary:
                                            dict_salary[
                                                trans["commodityUuid"]
                                            ] += trans["quantity"]

                                        else:
                                            dict_salary[trans["commodityUuid"]] = trans[
                                                "quantity"
                                            ]

                                        pprint(dict_salary)

                        dict_salary = dict(
                            OrderedDict(
                                sorted(dict_salary.items(), key=lambda t: -t[1])
                            )
                        )
                        _dict_total = {}
                        for k, v in dict_salary.items():
                            prod_name = Products.objects(uuid=k).only("name").first()
                            _dict_total[prod_name.name] = "{}‚ÇΩ".format(
                                v * documents_mot.uuid[k]
                            )

                        _dict_total.update(
                            {
                                "–°–£–ú–ú–ê –ó–ü:": "{}‚ÇΩ".format(
                                    round(int(sum_mot / 100 * 5) / 10) * 10
                                ),
                                "–î–ê–¢–ê:": since_[:10],
                                "–ú–ê–ì–ê–ó–ò–ù": shop.name,
                            }
                        )
                        result.append(_dict_total)
                    else:
                        result.append({since_[:10]: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö".upper()})
            return result
        #  # –ó–ü –ò–¢–û–ì–û
        if params["reports"] == "get_salary_total":
            # 'bonus –∑–∞ –≤—ã–ø. –ø–ª–∞–Ω–∞'.upper(): '{}‚Ç±'.format(),
            # 'percent –∑–∞ –∞–∫—Å—Å'.upper(): '{}%'.format(),
            # '–û–∫–ª–∞–¥'.upper(): '{}‚Ç±'.format(),
            # '–î–æ–ø–ª–∞—Ç–∞'.upper(): '{}‚Ç±'.format(),
            # '–ü–ª–∞–Ω'.upper(): '{}‚Ç±'.format(),
            # '–ü—Ä–æ–¥–∞–∂–∏'.upper(): '{}‚Ç±'.format(),
            # '–ü—Ä–æ–¥–∞–≤–µ—Ü'.upper(): '',
            # '–ú–∞–≥–∞–∑–∏–Ω'.upper(): '',
            # '–î–∞—Ç–∞'.upper(): '',
            # '–ò—Ç–≥–æ –∑–∞—Ä–ø–ª–∞—Ç–∞'.upper(): '{}‚Ç±'.format(),
            result = []
            employee_last_name = params["employee_uuid"]
            user = [
                element.uuid
                for element in Employees.objects(lastName=employee_last_name)
            ]
            # pprint(user)
            period = get_period(session)
            since = period["since"]
            until = period["until"]

            intervals = get_intervals(since, until, "days", 1)
            for since_, until_ in intervals:
                # pprint(since_)
                # pprint(until_)
                documents_open_session = Documents.objects(
                    __raw__={
                        "closeDate": {"$gte": since_, "$lt": until_},
                        "openUserUuid": {"$in": user},
                        "x_type": "OPEN_SESSION",
                    }
                ).first()
                pprint(documents_open_session)
                if documents_open_session:
                    # –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ (shop.name)
                    shop = (
                        Shop.objects(uuid=documents_open_session.shop_id)
                        .only("name")
                        .first()
                    )
                    sho_id = documents_open_session.shop_id
                    employee_uuid = documents_open_session.openUserUuid
                    employee = (
                        Employees.objects(uuid=employee_uuid).only("name").first()
                    )
                    total_salary = get_total_salary(
                        employee_last_name, sho_id, since_, until_
                    )
                    result.append(
                        {
                            "–ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Å—Å:".upper(): "{}‚Ç±".format(
                                total_salary["accessory_sum_sell"]
                            ),
                            "bonus –∑–∞ –∞–∫—Å—Å:".upper(): "{}‚Ç±".format(
                                total_salary["bonus_accessory"]
                            ),
                            "bonus –∑–∞ –º–æ—Ç–∏–∞. —Ç–æ–≤.:".upper(): "{}‚Ç±".format(
                                total_salary["bonus_motivation"]
                            ),
                            "–ü–ª–∞–Ω –ø–æ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º:".upper(): "{}‚Ç±".format(
                                total_salary["plan_motivation_prod"]
                            ),
                            "–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º:".upper(): "{}‚Ç±".format(
                                total_salary["sales_motivation_prod"]
                            ),
                            "bonus –∑–∞ –≤—ã–ø. –ø–ª–∞–Ω–∞:".upper(): "{}‚Ç±".format(
                                total_salary["bonus_motivation_prod"]
                            ),
                            "percent –∑–∞ –∞–∫—Å—Å:".upper(): "{}%".format(5),
                            "–û–∫–ª–∞–¥:".upper(): "{}‚Ç±".format(total_salary["salary"]),
                            "–î–æ–ø–ª–∞—Ç–∞:".upper(): "{}‚Ç±".format(total_salary["surcharge"]),
                            "–ü—Ä–æ–¥–∞–≤–µ—Ü:".upper(): employee.name.upper(),
                            "–ú–∞–≥–∞–∑–∏–Ω:".upper(): shop.name.upper(),
                            "–î–∞—Ç–∞:".upper(): until_[:10],
                            "–ò—Ç–≥–æ –∑–∞—Ä–ø–ª–∞—Ç–∞".upper(): "{}‚Ç±".format(
                                total_salary["total_salary"]
                            ),
                        }
                    )
                    # result.append(
                    #     get_total_salary(employee_last_name, sho_id, since_, until_)
                    # )
                    # result.append(get_mot_salary(sho_id, since_, until_))
                    # result.append(get_plan_bonus(sho_id, since_, until_))
                    # result.append(get_salary(sho_id, until_))
                    # result.append(get_surcharge(employee_last_name, until_))

                else:
                    result.append({until_[:10]: "–í–´–•–û–î–ù–û–ô"})
            return result
        #
        if params["reports"] == "get_salary_total_day":
            result = []

            period = get_period_day(session)
            since = period["since"]
            until = period["until"]

            intervals = get_intervals(since, until, "days", 1)
            for since_, until_ in intervals:
                documents_open_session = Documents.objects(
                    __raw__={
                        "closeDate": {"$gte": since_, "$lt": until_},
                        # "openUserUuid": {"$in": user},
                        "x_type": "OPEN_SESSION",
                    }
                )
                # pprint(documents_open_session)
                for doc in documents_open_session:
                    # –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ (shop.name)
                    shop = Shop.objects(uuid=doc["shop_id"]).only("name").first()
                    sho_id = doc["shop_id"]
                    employee_uuid = doc["openUserUuid"]
                    employee = Employees.objects(uuid=employee_uuid).first()
                    total_salary = get_total_salary(
                        employee.lastName, sho_id, since_, until_
                    )
                    result.append(
                        {
                            "–ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Å—Å:".upper(): "{}‚Ç±".format(
                                total_salary["accessory_sum_sell"]
                            ),
                            "bonus –∑–∞ –∞–∫—Å—Å:".upper(): "{}‚Ç±".format(
                                total_salary["bonus_accessory"]
                            ),
                            "bonus –∑–∞ –º–æ—Ç–∏–∞. —Ç–æ–≤.:".upper(): "{}‚Ç±".format(
                                total_salary["bonus_motivation"]
                            ),
                            "–ü–ª–∞–Ω –ø–æ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º:".upper(): "{}‚Ç±".format(
                                total_salary["plan_motivation_prod"]
                            ),
                            "–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º:".upper(): "{}‚Ç±".format(
                                total_salary["sales_motivation_prod"]
                            ),
                            "bonus –∑–∞ –≤—ã–ø. –ø–ª–∞–Ω–∞:".upper(): "{}‚Ç±".format(
                                total_salary["bonus_motivation_prod"]
                            ),
                            "percent –∑–∞ –∞–∫—Å—Å:".upper(): "{}%".format(5),
                            "–û–∫–ª–∞–¥:".upper(): "{}‚Ç±".format(total_salary["salary"]),
                            "–î–æ–ø–ª–∞—Ç–∞:".upper(): "{}‚Ç±".format(total_salary["surcharge"]),
                            "–ü—Ä–æ–¥–∞–≤–µ—Ü:".upper(): employee.name.upper(),
                            "–ú–∞–≥–∞–∑–∏–Ω:".upper(): shop.name.upper(),
                            "–î–∞—Ç–∞:".upper(): until_[:10],
                            "–ò—Ç–≥–æ –∑–∞—Ä–ø–ª–∞—Ç–∞".upper(): "{}‚Ç±".format(
                                total_salary["total_salary"]
                            ),
                        }
                    )

            return result
        # –ó–∞–ø—Ä–æ—Å –ó–ü –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. –ø–ª–∞–Ω–∞ –ø–æ –æ–¥–ª–Ω–æ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
        if params["reports"] == "get_salary_plan_day":
            group_id = (
                "78ddfd78-dc52-11e8-b970-ccb0da458b5a",
                "bc9e7e4c-fdac-11ea-aaf2-2cf05d04be1d",
                "0627db0b-4e39-11ec-ab27-2cf05d04be1d",
                "2b8eb6b4-92ea-11ee-ab93-2cf05d04be1d",
                "8a8fcb5f-9582-11ee-ab93-2cf05d04be1d",
                "97d6fa81-84b1-11ea-b9bb-70c94e4ebe6a",
                "ad8afa41-737d-11ea-b9b9-70c94e4ebe6a",
                "568905bd-9460-11ee-9ef4-be8fe126e7b9",
                "568905be-9460-11ee-9ef4-be8fe126e7b9",
            )
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            result = []
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            employee_last_name = params["employee_uuid"]
            # –ò–∑–≤–ª–µ–∫–∞–µ–º UUID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ–∞–º–∏–ª–∏–∏
            user_uuid = [
                element.uuid
                for element in Employees.objects(lastName=employee_last_name)
            ]

            user = Employees.objects(lastName=employee_last_name).only("name").first()

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
            period = get_period(session)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç –ø–µ—Ä–∏–æ–¥–∞
            since = period["since"]
            until = period["until"]

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏ —Å —à–∞–≥–æ–º –≤ 1 –¥–µ–Ω—å
            intervals = get_intervals(since, until, "days", 1)
            total_salary_plan = 0
            # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
            for since_, until_ in intervals:
                # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞ "OPEN_SESSION" –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                documents_open_session = Documents.objects(
                    __raw__={
                        "closeDate": {"$gte": since_, "$lt": until_},
                        "openUserUuid": {"$in": user_uuid},
                        "x_type": "OPEN_SESSION",
                    }
                ).first()
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–µ—Å—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                if documents_open_session:
                    # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —ç—Ç–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                    shop = (
                        Shop.objects(uuid=documents_open_session.shop_id)
                        .only("name")
                        .first()
                    )
                    # pprint(since_)
                    # pprint(until_)
                    # pprint(documents_open_session.shop_id)
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞–Ω–∞—Ö –ø—Ä–æ–¥–∞–∂ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
                    documents_plan = (
                        Plan.objects(
                            __raw__={
                                "closeDate": {"$gte": since_, "$lt": until_},
                                "shop_id": documents_open_session.shop_id,
                            }
                        )
                        .order_by("-closeDate")
                        .first()
                    )

                    # pprint(documents_plan)
                    data_plan = {}
                    sum_plan = 0
                    if documents_plan:
                        sum_plan = documents_plan.sum
                    else:
                        sum_plan = "no data"

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –≥—Ä—É–ø–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤
                    products = Products.objects(
                        __raw__={
                            "shop_id": documents_open_session.shop_id,
                            "parentUuid": {"$in": group_id},
                        }
                    )

                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                    products_uuid = [element.uuid for element in products]

                    # –¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø—Ä–æ–¥–∞–∂–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã)
                    x_type = ["SELL", "PAYBACK"]

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞—Ö –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                    documents_2 = Documents.objects(
                        __raw__={
                            "closeDate": {"$gte": since_, "$lt": until_},
                            "shop_id": documents_open_session.shop_id,
                            "x_type": {"$in": x_type},
                            "transactions.commodityUuid": {"$in": products_uuid},
                        }
                    )
                    sum_sell_today = 0

                    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂ –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
                    for doc_2 in documents_2:
                        for trans_2 in doc_2["transactions"]:
                            if trans_2["x_type"] == "REGISTER_POSITION":
                                if trans_2["commodityUuid"] in products_uuid:
                                    sum_sell_today += trans_2["sum"]

                    data_plan.update({"–ü—Ä–æ–¥": sum_sell_today})

                    documents_plan_motivation = (
                        GroupUuidAks.objects(
                            __raw__={
                                "closeDate": {"$lte": until_[:10]},
                                "shop_id": documents_open_session.shop_id,
                                "x_type": "MOTIVATION",
                            }
                        )
                        .order_by("-closeDate")
                        .first()
                    )

                    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –ø–ª–∞–Ω—É –º–æ—Ç–∏–≤–∞—Ü–∏–∏
                    if documents_plan_motivation:
                        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–ª–∞–Ω—É —Ä–∞–≤–Ω—ã "no data"
                        if sum_plan == "no data":
                            symbol = "üî¥"
                            salary_plan = "no data"
                        else:
                            # –ï—Å–ª–∏ —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ —Å–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É –ø–ª–∞–Ω—É
                            if sum_sell_today >= sum_plan:
                                symbol = "‚úÖ"
                                salary_plan = documents_plan_motivation["motivation"]
                                total_salary_plan += documents_plan_motivation[
                                    "motivation"
                                ]
                            else:
                                symbol = "üü°"
                                salary_plan = 0
                    else:
                        symbol = "üî¥"
                        salary_plan = 0

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞
                    data_plan.update(
                        {
                            "–ü–ª–∞–Ω:".upper(): f"{sum_plan}‚Ç±",
                            "–ü—Ä–æ–¥:".upper(): f"{sum_sell_today}‚Ç±",
                            "–ó–ø:".upper(): f"{salary_plan}‚Ç±",
                            "–ú–∞–≥–∞–∑–∏–Ω:".upper(): shop.name,
                        }
                    )
                    data_plan.update(
                        {
                            symbol: " ",
                        }
                    )
                    pprint(data_plan)
                    result.append(data_plan)
            result.append(
                {
                    "–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞:".upper(): since[0:10],
                    "–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞:".upper(): until[0:10],
                    "–ü—Ä–æ–¥–∞–≤–µ—Ü:".upper(): user.name,
                    "–ò—Ç–æ–≥–æ –∑–ø:".upper(): f"{total_salary_plan}‚Ç±",
                }
            )
            return result
        if params["reports"] == "get_salary_day":

            def process_interval(interval, user: str):
                """
                –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.

                Args:
                    interval (tuple): –ö–æ—Ä—Ç–µ–∂, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (since, until).
                    user (list): –°–ø–∏—Å–æ–∫ UUID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.

                Returns:
                    list: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.
                """
                since, until = interval

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–µ—Å—Å–∏–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏
                documents_open_session = Documents.objects(
                    __raw__={
                        "closeDate": {"$gte": since, "$lt": until},
                        "openUserUuid": {"$in": user},
                        "x_type": "OPEN_SESSION",
                    }
                ).first()

                result = []

                if documents_open_session:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–µ—Å—Å–∏—è, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ
                    shop = (
                        Shop.objects(uuid=documents_open_session.shop_id)
                        .only("name")
                        .first()
                    )

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞
                    documents_aks = (
                        GroupUuidAks.objects(
                            __raw__={
                                "closeDate": {"$lte": until[:10]},
                                "shop_id": documents_open_session.shop_id,
                                "x_type": "MOTIVATION_PARENT_UUID",
                            }
                        )
                        .order_by("-closeDate")
                        .first()
                    )

                    if documents_aks:
                        group = Products.objects(
                            __raw__={
                                "shop_id": documents_open_session.shop_id,
                                "parentUuid": {"$in": documents_aks.parentUuids},
                            }
                        )

                        products_uuid = [i.uuid for i in group]

                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏
                        documents_sale = Documents.objects(
                            __raw__={
                                "closeDate": {"$gte": since, "$lt": until},
                                "shop_id": documents_open_session.shop_id,
                                "x_type": "SELL",
                                "transactions.commodityUuid": {"$in": products_uuid},
                            }
                        )

                        sum_sales = sum(
                            decimal.Decimal(trans["sum"])
                            for doc in documents_sale
                            for trans in doc["transactions"]
                            if trans["x_type"] == "REGISTER_POSITION"
                            and trans["commodityUuid"] in products_uuid
                        )

                        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –∑–∞ –¥–µ–Ω—å
                        salary_total_day = decimal.Decimal(sum_sales) / 100 * 5

                        result.append(
                            {
                                "–°–£–ú–ú–ê:": f"{sum_sales}‚ÇΩ",
                                "–ü–†–û–¶–ï–ù–¢:": "5%",
                                "–ó–ü": f"{salary_total_day}‚ÇΩ",
                                "–î–ê–¢–ê:": since[:10],
                                "–ú–ê–ì–ê–ó–ò–ù": shop.name,
                            }
                        )

                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–µ—Å—Å–∏–∏ - –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å
                    result.append(
                        {
                            "üèñÔ∏è –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å:".upper(): since[:10],
                        }
                    )

                return result

            def get_salary_aks_p(session):
                """
                –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏ –∑–∞—Ä–ø–ª–∞—Ç–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.

                Args:
                    session: –û–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏.

                Returns:
                    tuple: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤, –æ–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ –∏ –æ–±—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞.
                """
                result = []

                employee_last_name = params["employee_uuid"]

                employee_name = (
                    Employees.objects(lastName=employee_last_name).only("name").first()
                )

                user = [
                    element.uuid
                    for element in Employees.objects(lastName=employee_last_name)
                ]

                since = (
                    get(session.params["inputs"]["0"]["openDate"])
                    .replace(hour=23, minute=0)
                    .isoformat()
                )
                until = (
                    get(session.params["inputs"]["0"]["closeDate"])
                    .replace(hour=23, minute=0)
                    .isoformat()
                )

                intervals = get_intervals(since, until, "days", 1)

                # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
                with concurrent.futures.ThreadPoolExecutor() as executor:
                    tasks = [
                        executor.submit(process_interval, interval, user)
                        for interval in intervals
                    ]

                    for task in concurrent.futures.as_completed(tasks):
                        result.extend(task.result())

                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂ –∏ –æ–±—â–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
                data_total_sall = sum(
                    decimal.Decimal(item["–°–£–ú–ú–ê:"][:-1])
                    for item in result
                    if "–°–£–ú–ú–ê:" in item
                )
                data_total_salary = sum(
                    decimal.Decimal(item["–ó–ü"][:-1]) for item in result if "–ó–ü" in item
                )

                result.append(
                    {
                        "‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è–ò—Ç–æ–≥–æ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è".upper(): " ",
                        "–ü–†–û–î–ê–ñ–ò:": f"{data_total_sall}‚ÇΩ",
                        "–ü–†–û–¶–ï–ù–¢:": "5%",
                        "–ó–ü": f"{data_total_salary}‚ÇΩ",
                        "–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞:": since[0:10],
                        "–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞:": until[0:10],
                        "–ü—Ä–æ–¥–∞–≤–µ—Ü:".upper(): employee_name.name.upper(),
                    }
                )

                return result

            result = get_salary_aks_p(session)

            return result

            # result = []

            # # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            # employee_last_name = params["employee_uuid"]
            # employee_name = (
            #     Employees.objects(lastName=employee_last_name).only("name").first()
            # )

            # # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ uuid —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ñ–∞–º–∏–ª–∏–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            # user = [
            #     element.uuid
            #     for element in Employees.objects(lastName=employee_last_name)
            # ]

            # # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
            # since = (
            #     get(session.params["inputs"]["0"]["openDate"])
            #     .replace(hour=23, minute=00)
            #     .isoformat()
            # )
            # until = (
            #     get(session.params["inputs"]["0"]["closeDate"])
            #     .replace(hour=23, minute=00)
            #     .isoformat()
            # )

            # # –†–∞–∑–±–∏–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–Ω–µ–π
            # intervals = get_intervals(since, until, "days", 1)

            # data_total_sall = 0
            # data_total_salary = 0

            # # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
            # for since_, until_ in intervals:
            #     # pprint(since_)
            #     documents_open_session = Documents.objects(
            #         __raw__={
            #             "closeDate": {"$gte": since_, "$lt": until_},
            #             "openUserUuid": {"$in": user},
            #             "x_type": "OPEN_SESSION",
            #         }
            #     ).first()

            #     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–µ—Å—Å–∏–∏
            #     if documents_open_session:
            #         shop = (
            #             Shop.objects(uuid=documents_open_session.shop_id)
            #             .only("name")
            #             .first()
            #         )

            #         # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞
            #         documents_aks = (
            #             GroupUuidAks.objects(
            #                 __raw__={
            #                     "closeDate": {"$lte": until_[:10]},
            #                     "shop_id": documents_open_session.shop_id,
            #                     "x_type": "MOTIVATION_PARENT_UUID",
            #                 }
            #             )
            #             .order_by("-closeDate")
            #             .first()
            #         )

            #         if documents_aks:
            #             group = Products.objects(
            #                 __raw__={
            #                     "shop_id": documents_open_session.shop_id,
            #                     # 'group': True,
            #                     "parentUuid": {"$in": documents_aks.parentUuids},
            #                 }
            #             )

            #             products_uuid = [i.uuid for i in group]

            #             documents_sale = Documents.objects(
            #                 __raw__={
            #                     "closeDate": {"$gte": since_, "$lt": until_},
            #                     "shop_id": documents_open_session.shop_id,
            #                     "x_type": "SELL",
            #                     "transactions.commodityUuid": {"$in": products_uuid},
            #                 }
            #             )

            #             sum_sales = 0

            #             for doc in documents_sale:
            #                 for trans in doc["transactions"]:
            #                     if trans["x_type"] == "REGISTER_POSITION":
            #                         if trans["commodityUuid"] in products_uuid:
            #                             sum_sales += decimal.Decimal(trans["sum"])
            #             salary_total_day = (
            #                 decimal.Decimal(sum_sales)
            #                 / decimal.Decimal(100)
            #                 * decimal.Decimal(5)
            #             )

            #             data_total_sall += decimal.Decimal(sum_sales)
            #             data_total_salary += decimal.Decimal(salary_total_day)

            #             result.append(
            #                 {
            #                     "–°–£–ú–ú–ê:": f"{sum_sales}‚ÇΩ",
            #                     "–ü–†–û–¶–ï–ù–¢:": "5%",
            #                     "–ó–ü": f"{salary_total_day}‚ÇΩ",
            #                     "–î–ê–¢–ê:": since_[:10],
            #                     "–ú–ê–ì–ê–ó–ò–ù": shop.name,
            #                 }
            #             )

            #     else:
            #         pprint("no data")
            #         result.append(
            #             {
            #                 "üèñÔ∏è –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å:".upper(): since_[:10],
            #             }
            #         )

            # result.append(
            #     {
            #         "‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è–ò—Ç–æ–≥–æ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è".upper(): " ",
            #         "–ü–†–û–î–ê–ñ–ò:": f"{data_total_sall}‚ÇΩ",
            #         "–ü–†–û–¶–ï–ù–¢:": "5%",
            #         "–ó–ü": f"{data_total_salary}‚ÇΩ",
            #         "–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞:": since[0:10],
            #         "–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞:": until[0:10],
            #         "–ü—Ä–æ–¥–∞–≤–µ—Ü:".upper(): employee_name.name.upper(),
            #         "–ú–ê–ì–ê–ó–ò–ù": shop.name,
            #     }
            # )

            # return result

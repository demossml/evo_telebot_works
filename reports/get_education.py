from bd.model import Session, –°onsent
from .inputs import (
    EducationInput,
    EducationStartDateInput,
    EducationEndDateInput,
    DocStatusInput,
    SpecializationInput,
    EducationInstitutionNameInput,
)

import sys
import logging

logger = logging.getLogger(__name__)

name = "üéì  –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ‚û°Ô∏è".upper()
desc = "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
mime = "text"


def get_inputs(session: Session):
    return {
        "education": EducationInput,
        "education_institution_name": EducationInstitutionNameInput,
        "education_start_date": EducationStartDateInput,
        "education_end_date": EducationEndDateInput,
        "specialization": SpecializationInput,
        "docStatus": DocStatusInput,
    }


def generate(session: Session):
    try:
        room = session["room"]

        report_data = {"user_id": session.user_id, "education": []}

        result = []
        # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
        for i in range(int(room) + 1):
            params = session.params["inputs"][str(i)]
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Å–µ—Å—Å–∏–∏
            report_data["education"].append(params)

            result.append(
                {
                    "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:": params.get("education", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
                    "–ù–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è:": params.get(
                        "education_institution_name", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    ),
                    "–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è": params.get(
                        "education_start_date", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    ),
                    "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è": params.get("education_end_date", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
                    "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è": params.get("specialization", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
                    "–î–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ –í–∞—à—É –∞–Ω–∫–µ—Ç—É": "üìù",
                }
            )

        –°onsent.objects(user_id=session.user_id).update(**report_data, upsert=True)

        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e} –Ω–∞ —Å—Ç—Ä–æ–∫–µ {sys.exc_info()[-1].tb_lineno}")

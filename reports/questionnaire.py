from bd.model import Shop, Products, Documents, Session, Employees
from .util import (
    get_intervals,
    get_period,
    get_shops_user_id,
    get_shops,
    get_top_n_sales,
)
from pprint import pprint
from collections import OrderedDict


from .inputs import (
    ReportSalesInput,
    ShopAllInput,
    GroupInput,
    PeriodDateInput,
    OpenDatePastInput,
    CloseDatePastInput,
)

from io import BytesIO
import plotly.express as px
import io
import plotly.subplots as sp
import plotly.graph_objects as go
import math

name = "üõí –û–¢–ß–ï–¢–´ –ü–û –ü–†–û–î–ê–ñ–ê–ú ‚û°Ô∏è"
desc = "–û–¢–ß–ï–¢–´ –ø–æ –ü–†–û–î–ê–ñ–ê–ú"
mime = "image_bytes"


def get_inputs(session: Session):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
    inputs = session.params.get("inputs", {}).get("0", {})

    # –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–≤–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
    if not inputs:
        return {"report": ReportSalesInput}

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    period = inputs.get("period", None)
    report_type = inputs.get("report", None)

    # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    shop_uuid = get_shops_user_id(session)
    # –°–æ–∑–¥–∞–µ–º –≤–≤–æ–¥ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã
    shop_input = {"shop": ShopAllInput} if len(shop_uuid) > 0 else {}

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
    if period in ("day", "week", "fortnight", "month"):
        # –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ - –¥–µ–Ω—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –≤–≤–æ–¥, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–≤–æ–¥ —Å –¥–∞—Ç–∞–º–∏
        return (
            {"openDate": OpenDatePastInput, "closeDate": CloseDatePastInput}
            if period != "day"
            else {}
        )
    # –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–≤–æ–¥ —Å –ø—Ä–æ—à–µ–¥—à–µ–π –¥–∞—Ç–æ–π
    elif period is not None:
        return {"openDate": OpenDatePastInput}

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    if report_type == "get_sales_by_day_of_the_week":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–≤–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–∏—á–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
        return {"shop": ShopAllInput, "period": PeriodDateInput, **shop_input}
    elif report_type in (
        "get_sales_by_shop_product_group_rub",
        "get_sales_by_shop_product_group_unit",
    ):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–≤–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º, –≥—Ä—É–ø–ø–∞–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –ø–µ—Ä–∏–æ–¥—É —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–∏—á–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
        return {
            "shop": ShopAllInput,
            "group": GroupInput,
            "period": PeriodDateInput,
            **shop_input,
        }
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–≤–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –ø–æ –≥—Ä—É–ø–ø–∞–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –ø–µ—Ä–∏–æ–¥—É —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–∏—á–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
    else:
        return {"group": GroupInput, "period": PeriodDateInput, **shop_input}


def generate(session: Session):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Å–µ—Å—Å–∏–∏
    params = session.params["inputs"]["0"]

    period = get_period(session)
    since = period["since"]
    until = period["until"]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö
    shops = get_shops(session)
    shop_id = shops["shop_id"]
    shop_name = shops["shop_name"]

    # –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    x_type = ["SELL", "PAYBACK"]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'group'
    if "group" in params:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å —É—Å–ª–æ–≤–∏–µ–º, —á—Ç–æ 'shop_id' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤
        query = {"shop_id": {"$in": shop_id}}

        products_name = "–≤—Å–µ –≥—Ä—É–ø–ø—ã"
        # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä 'group' –Ω–µ —Ä–∞–≤–µ–Ω "all", –¥–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è 'parentUuid' –≤ –∑–∞–ø—Ä–æ—Å
        if params["group"] != "all":
            query["parentUuid"] = params["group"]
            products_name = (
                Products.objects(uuid=params["group"]).only("name").first().name
            )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        products = Products.objects(__raw__=query)
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ UUID –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        products_uuid = [element.uuid for element in products]

    if params["report"] == "get_sales_by_day_of_the_week":
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —Å—É–º–º –ø—Ä–æ–¥–∞–∂ –∏ —Ç–∏–ø–æ–≤ –æ–ø–ª–∞—Ç—ã
        payment_type = {
            "CARD": "–ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π",
            "ADVANCE": "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–æ–π (–∑–∞—á–µ—Ç–æ–º –∞–≤–∞–Ω—Å–∞)",
            "CASH": "–ù–∞–ª–∏—á–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏",
            "COUNTEROFFER": "–í—Å—Ç—Ä–µ—á–Ω—ã–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º",
            "CREDIT": "–ü–æ—Å—Ç–æ–ø–ª–∞—Ç–æ–π (–≤ –∫—Ä–µ–¥–∏—Ç)",
            "ELECTRON": "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏",
            "UNKNOWN": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ. –ü–æ-—É–º–æ–ª—á–∞–Ω–∏—é",
        }
        payment_type_sum_sell_total = {ptype: 0 for ptype in payment_type}
        sum_sell_total = 0
        result = []
        intervals = get_intervals(since, until, "days", 1)
        for since_, until_ in intervals:
            for shop in shop_id:
                _dict = {
                    "–ú–∞–≥–∞–∑–∏–Ω:": "{}:".format(
                        Shop.objects(uuid__exact=shop).only("name").first().name
                    ).upper()
                }
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–µ—Å—Å–∏–µ–π
                documents_open_session = Documents.objects(
                    __raw__={
                        "closeDate": {"$gte": since, "$lt": until},
                        "shop_id": shop,
                    }
                ).first()
                if documents_open_session:
                    employees = Employees.objects(
                        uuid=documents_open_session.closeUserUuid
                    ).first()
                    last_name = employees.lastName
                    name_ = employees.name
                else:
                    last_name = ""
                    name_ = ""

                shop_ = Shop.objects(uuid__exact=shop).only("name").first()
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
                documents = Documents.objects(
                    __raw__={
                        "closeDate": {"$gte": since_, "$lt": until_},
                        "shop_id": shop,
                        "x_type": "SELL",
                    }
                )
                if len(documents) > 0:
                    sum_sell = 0
                    payment_type_sum_sell = {
                        "CARD": 0,
                        "ADVANCE": 0,
                        "CASH": 0,
                        "COUNTEROFFER": 0,
                        "CREDIT": 0,
                        "ELECTRON": 0,
                        "UNKNOWN": 0,
                    }

                    for doc in documents:
                        for trans in doc["transactions"]:
                            if trans["x_type"] == "DOCUMENT_CLOSE":
                                sum_sell += trans["sum"]
                                sum_sell_total += trans["sum"]
                            if trans["x_type"] == "PAYMENT":
                                payment_type_sum_sell[trans["paymentType"]] += trans[
                                    "sum"
                                ]
                                payment_type_sum_sell_total[
                                    trans["paymentType"]
                                ] += trans["sum"]

                    # _dict["–ú–∞–≥–∞–∑–∏–Ω:"] = "{}:".format(shop_.name).upper()
                    _dict["–ü–æ—Ä–¥–∞–≤–µ—Ü:"] = "{} {}:".format(last_name, name_).upper()
                    _dict["–î–∞—Ç–∞:"] = since_[0:10]
                    _dict["–°—É–º–º–∞:"] = "{} {}".format(sum_sell, "‚ÇΩ")

                    for k, v in payment_type_sum_sell.items():
                        if v > 0:
                            _dict[payment_type[k]] = "{} {}".format(v, "‚ÇΩ")

                else:
                    _dict["–ú–∞–≥–∞–∑–∏–Ω:"] = "{}:".format(shop_.name).upper()
                    _dict["–î–∞—Ç–∞:"] = since_[0:10]
                    _dict["–°—É–º–º–∞:"] = "{} {}".format(0, "‚ÇΩ")

                result.append(_dict)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        dict_total = {
            "–ò—Ç–æ–≥–æ:".upper(): "",
            "–ù–∞—á–∞–ª–æ –ø–∏—Ä–∏–æ–¥–∞:": since[0:10],
            "–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–∏—Ä–∏–æ–¥–∞:": until[0:10],
        }
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–∏–ø–∞–º –æ–ø–ª–∞—Ç—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏
        for k, v in payment_type_sum_sell_total.items():
            if v > 0:
                dict_total[payment_type[k]] = "{} {}".format(v, "‚ÇΩ")
        dict_total["–°—É–º–º–∞:"] = "{} {}".format(sum_sell_total, "‚ÇΩ")
        result.append(dict_total)

        return result, None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ "report" –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è–µ–º–æ–π –∑–∞–¥–∞—á–∏
    if params["report"] == "get_sales_by_shop_product_group_rub":
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MongoDB
        documents = Documents.objects(
            __raw__={
                "closeDate": {"$gte": since, "$lt": until},
                "shop_id": {"$in": shop_id},
                "x_type": "SELL",
                "transactions.commodityUuid": {"$in": products_uuid},
            }
        )

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        sales_data = {}

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        for doc in documents:
            for trans in doc["transactions"]:
                if trans["x_type"] == "REGISTER_POSITION":
                    if trans["commodityUuid"] in products_uuid:
                        commodity_name = trans["commodityName"]
                        sale_sum = trans["sum"]

                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å —Å—É–º–º –ø—Ä–æ–¥–∞–∂ –ø–æ —Ç–æ–≤–∞—Ä—É
                        if commodity_name in sales_data:
                            sales_data[commodity_name] += sale_sum
                        else:
                            sales_data[commodity_name] = sale_sum

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ
        shop = Shop.objects(uuid__exact=shop_id[0]).only("name").first()

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        sorted_sales_data = dict(
            OrderedDict(sorted(sales_data.items(), key=lambda t: -t[1]))
        )
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–∂
        sorted_sales = get_top_n_sales(sales_data)

        if len(sorted_sales[0]) > 0:

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂
            shop_names = list(sorted_sales[0].keys())
            sum_sales_quantity = list(sorted_sales[0].values())
            sum_sales_quantity_total = sum(sorted_sales[0].values())

            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
            fig = px.bar(
                y=shop_names,
                x=sum_sales_quantity,
                title=f"–ü—Ä–æ–¥–∞–∂–∏ –≤ ‚ÇΩ. –ø–æ {products_name}. –¢–æ–ø {sorted_sales[1]}.–ù–∞—á–∞–ª–æ/–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ - {since[0:10]}/{until[0:10]}",
                labels={"y": "–ú–∞–≥–∞–∑–∏–Ω", "x": "–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂"},
                # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ –≤–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é
            )
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            font_size = 24  # –ó–∞–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞

            pprint(font_size)
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            fig.update_layout(
                font=dict(size=font_size, family="Arial, sans-serif", color="black"),
                # plot_bgcolor="black",  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å —Å—É–º–º–∞–º–∏ –ø—Ä–æ–¥–∞–∂
            for i, value in enumerate(sum_sales_quantity):
                fig.add_annotation(
                    x=value,
                    y=shop_names[i],
                    text=f"{value:,}",  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
                    showarrow=True,
                    arrowhead=2,
                    arrowcolor="black",
                    ax=40,
                    ay=0,
                )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –æ—Å–µ–π
            fig.update_xaxes(title=f"–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ {sum_sales_quantity_total} ‚ÇΩ.")

            fig.update_yaxes(
                title=f"–ú–∞–≥–∞–∑–∏–Ω {shop_name}", autorange="reversed"
            )  # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ—Å—å Y

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –≤ –æ–±—ä–µ–∫—Ç BytesIO
            image_buffer = io.BytesIO()

            target_width = 1700
            # target_height = 2000
            target_height = len(shop_names) * 54

            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
            dynamic_aspect_ratio = (
                len(shop_names) / 70
            )  # –ü—Ä–∏–º–µ—Ä: –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é
            optimal_width = min(target_width, target_height / dynamic_aspect_ratio)
            optimal_height = min(target_height, target_width * target_height)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            fig.write_image(
                image_buffer, format="png", width=optimal_width, height=optimal_height
            )

            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
            image_buffer.seek(0)
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂
        total_sales = sum(sorted_sales_data.values())

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        total_info = {}
        for k, v in sorted_sales_data.items():
            total_info[k] = f"{v} ‚ÇΩ"
        total_info["–ò—Ç–æ–≥–æ:"] = f"{total_sales} ‚ÇΩ"
        total_info["–ú–∞–≥–∞–∑–∏–Ω:"] = shop.name
        total_info["–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞:"] = since[0:10]
        total_info["–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞:"] = until[0:10]

        return [total_info], image_buffer

    if params["report"] == "get_sales_by_shop_product_group_unit":
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        documents = Documents.objects(
            __raw__={
                "closeDate": {"$gte": since, "$lt": until},
                "shop_id": {"$in": shop_id},
                "x_type": "SELL",
                "transactions.commodityUuid": {"$in": products_uuid},
            }
        )

        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        sales_by_product = {}

        # –û–±—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        for doc in documents:
            for trans in doc["transactions"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                if (
                    trans["x_type"] == "REGISTER_POSITION"
                    and trans["commodityUuid"] in products_uuid
                ):
                    commodity_name = trans["commodityName"]
                    quantity = trans["quantity"]
                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º
                    if commodity_name in sales_by_product:
                        sales_by_product[commodity_name] += quantity
                    else:
                        sales_by_product[commodity_name] = quantity

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        sorted_sales_data = dict(
            OrderedDict(sorted(sales_by_product.items(), key=lambda t: -t[1]))
        )

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–∂
        sorted_sales = get_top_n_sales(sales_by_product)

        if len(sorted_sales[0]) > 0:

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂
            shop_names = list(sorted_sales[0].keys())
            sum_sales_quantity = list(sorted_sales[0].values())
            sum_sales_quantity_total = sum(sorted_sales[0].values())

            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
            fig = px.bar(
                y=shop_names,
                x=sum_sales_quantity,
                title=f"–ü—Ä–æ–¥–∞–∂–∏ –≤ —à—Ç. –ø–æ {products_name}. –¢–æ–ø {sorted_sales[1]}.–ù–∞—á–∞–ª–æ/–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ - {since[0:10]}/{until[0:10]}",
                labels={"y": "–ú–∞–≥–∞–∑–∏–Ω", "x": "–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂"},
                # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ –≤–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é
            )
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            font_size = 24  # –ó–∞–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞

            pprint(font_size)
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            fig.update_layout(
                font=dict(size=font_size, family="Arial, sans-serif", color="black"),
                # plot_bgcolor="black",  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å —Å—É–º–º–∞–º–∏ –ø—Ä–æ–¥–∞–∂
            for i, value in enumerate(sum_sales_quantity):
                fig.add_annotation(
                    x=value,
                    y=shop_names[i],
                    text=f"{value:,}",  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
                    showarrow=True,
                    arrowhead=2,
                    arrowcolor="black",
                    ax=40,
                    ay=0,
                )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –æ—Å–µ–π
            fig.update_xaxes(title=f"–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ {sum_sales_quantity_total}—à—Ç.")

            fig.update_yaxes(
                title=f"–ú–∞–≥–∞–∑–∏–Ω {shop_name}", autorange="reversed"
            )  # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ—Å—å Y

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –≤ –æ–±—ä–µ–∫—Ç BytesIO
            image_buffer = io.BytesIO()

            target_width = 1700
            # target_height = 2000
            target_height = len(shop_names) * 54
            # pprint(len(shop_names))

            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
            dynamic_aspect_ratio = (
                len(shop_names) / 70
            )  # –ü—Ä–∏–º–µ—Ä: –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é
            optimal_width = min(target_width, target_height / dynamic_aspect_ratio)
            optimal_height = min(target_height, target_width * target_height)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            fig.write_image(
                image_buffer, format="png", width=optimal_width, height=optimal_height
            )

            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
            image_buffer.seek(0)

            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂
            total_quantity = sum(sorted_sales[0].values())

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç—á–µ—Ç–∞
            report_data = {}

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤ —Å–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for product_name, quantity in sorted_sales_data.items():
                report_data.update({product_name: f"{quantity} —à—Ç."})

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            report_data.update({"–ò—Ç–æ–≥–æ:": f"{total_quantity} —à—Ç."})

            report_data.update(
                {
                    "–ú–∞–≥–∞–∑–∏–Ω:": shop_name,
                    "–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞:": since[0:10],
                    "–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞:": until[0:10],
                }
            )

            return [report_data], image_buffer
        else:
            return [
                {
                    "–ú–∞–≥–∞–∑–∏–Ω:": shop_name,
                    "–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞:": since[0:10],
                    "–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞:": until[0:10],
                    "–ò—Ç–æ–≥–æ:": " 0 —à—Ç.",
                }
            ]

from arrow import utcnow
from bd.model import Session, CashRegister
from pprint import pprint
from .util import period_to_date, get_intervals

name = "üí∏üîô –í—ã–ø–ª–∞—Ç–∞ ‚û°Ô∏è".upper()
desc = "–í—ã–ø–ª–∞—Ç–∞"
mime = "text"


class PaymentFormatInput:
    name = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã"
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "cash", "name": "–ù–∞–ª —Ñ–∞–∫—Ç ‚û°Ô∏è".upper()},
            {"id": "cashless_payments", "name": "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç ‚û°Ô∏è".upper()},
        ]
        return output


class PeriodOpenDateInput:
    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ üóì".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "day", "name": "–î–µ–Ω—å ‚û°Ô∏è".upper()},
            {"id": "week", "name": "–ù–µ–¥–µ–ª—è ‚û°Ô∏è".upper()},
            {"id": "fortnight", "name": "–î–≤–µ –Ω–µ–¥–µ–ª–∏ ‚û°Ô∏è".upper()},
            {"id": "month", "name": "–ú–µ—Å—è—Ü ‚û°Ô∏è".upper()},
            {"id": "two months", "name": "–î–≤–∞ –º–µ—Å—è—Ü–∞ ‚û°Ô∏è".upper()},
        ]

        return output


class OpenDateInput:
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–æ –ø–∏—Ä–∏–æ–¥–∞ üìÖ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = []
        # pprint(session['params']['inputs']['period'])
        since = period_to_date(session["params"]["inputs"]["0"]["periodOpenDate"])
        until = utcnow().isoformat()
        intervals = get_intervals(since, until, "days", 1)
        # pprint(intervals)
        for left, right in intervals:
            # pprint(left)
            output.append({"id": left, "name": "{} ‚û°Ô∏è".format(left[0:10])})

        return output


class whoInput:
    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç –∫–æ–º—É ‚úçÔ∏è".upper()
    type = "MESSAGE"


class baseInput:
    desc = "–û—Å–Ω–æ–≤–∞–Ω–∏–µ ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "–ê—Ä–µ–Ω–¥–∞1", "name": "–ê—Ä–µ–Ω–¥–∞1 ‚û°Ô∏è".upper()},
            {"id": "–ó–ü", "name": "–ó–ü ‚û°Ô∏è".upper()},
            {"id": "–ó–ü –î", "name": "–ó–ü –î ‚û°Ô∏è".upper()},
            {"id": "–ê—Ä–µ–Ω–¥–∞", "name": "–ê—Ä–µ–Ω–¥–∞ ‚û°Ô∏è".upper()},
            {"id": "–ì–°–ú", "name": "–ì–°–ú ‚û°Ô∏è".upper()},
            {"id": "–ó–∞–∫—É–ø–∫–∞ –¢–æ–≤–∞—Ä–∞", "name": "–ó–∞–∫—É–ø–∫–∞ –¢–æ–≤–∞—Ä–∞ ‚û°Ô∏è".upper()},
            {"id": "–ü—Ä–æ—á–∏–µ", "name": "–ü—Ä–æ—á–∏–µ ‚û°Ô∏è".upper()},
        ]

        return output


class commentInput:
    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–µ–Ω—Ç—ã—Ä–∏–π ‚úçÔ∏è".upper()
    type = "MESSAGE"


class CashOutcomeInput:
    desc = "–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É ‚úçÔ∏è".upper()
    type = "MESSAGE"


def get_inputs(session: Session):
    if session.params["inputs"]["0"]:
        if session.params["inputs"]["0"]["payment"] == "cash":
            return {
                "who": whoInput,
                "base": baseInput,
                "comment": commentInput,
                "cashOutcome": CashOutcomeInput,
            }
        else:
            return {
                "periodOpenDate": PeriodOpenDateInput,
                "openDate": OpenDateInput,
                "who": whoInput,
                "base": baseInput,
                "comment": commentInput,
                "cashOutcome": CashOutcomeInput,
            }
    else:
        return {
            "payment": PaymentFormatInput,
        }


def generate(session: Session):
    params = session.params["inputs"]["0"]
    if session.params["inputs"]["0"]["payment"] == "cash":
        close_date = utcnow().now().isoformat()
    else:
        close_date = params["openDate"]

    _dict = {
        "user_id": session["user_id"],
        "payment": params["payment"],
        "who": params["who"],
        "base": params["base"],
        "comment": params["comment"],
        "cash": float(params["cashOutcome"]),
        "x_type": "CASH_OUTCOME",
        "closeDate": close_date,
    }

    number = CashRegister.objects().order_by("-closeDate").first()
    _dict["number"] = number["number"] + 1

    CashRegister.objects(closeDate=_dict["closeDate"]).update(**_dict, upsert=True)

    if params["payment"] == "cashless_payments":
        payment = "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç"
    else:
        payment = "–ù–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç"

    result = {
        "–ö–æ–º—É:": params["who"],
        "–û—Å–Ω–æ–≤–∞–Ω–∏–µ:": params["base"],
        "–°—É–º–º–∞:": float(params["cashOutcome"]),
        "–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π:": params["comment"],
        "–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã:": payment,
        "–¢–∏–ø:": "–í—ã–ø–ª–∞—Ç–∞",
        "–î–∞—Ç–∞:": close_date[0:16],
        "‚Ññ:": number["number"] + 1,
    }
    return [result]

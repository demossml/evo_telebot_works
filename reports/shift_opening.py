from arrow import utcnow, get
from bd.model import (
    Session,
    Shift_Opening_Report,
    Plan,
    Employees,
    GetTime,
    Products,
    GroupUuidAks,
)
from .util import (
    generate_plan,
    get_shops,
    get_shops_user_id,
    get_period_day,
    generate_plan_,
)
from .inputs import (
    ShopInput,
    OpenDatePast2Input,
    ReportsShiftOpeningInput,
    AfsInput,
    PeriodDateInput,
)

from pprint import pprint

name = "üïí ‚åõ üí∞ üì∑–û—Ç–∫—Ä—ã—Ç–∏–µ –¢–¢ ‚û°Ô∏è".upper()
desc = "–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã"
mime = "image"


# –£—Ç—Ä–æ:
# 1. –ó–∞—á–µ–∫–∏–Ω–∏—Ç—å—Å—è
# 2. –°–Ω—è—Ç—å —Å –æ—Ö—Ä–∞–Ω—ã
# 3 –§–æ—Ç–æ –∫–∞—Å—Å—ã (–≤—Ä–µ–º—è/–¥–∞—Ç–∞)
# 4. –§–æ—Ç–æ (–¢–¢ —Å–Ω–∞—Ä—É–∂–∏/–≤–Ω—É—Ç—Ä–∏)
# 5. –ö–∞—Å—Å–∞ –æ–∫/–Ω–µ –æ–∫ (–ø–µ—Ä–µ—Å—á–µ—Ç –¥–µ–Ω–µ–≥)


# class ShopInput:
#     desc = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞"
#     type = "SELECT"
#
#     def get_options(self, session: Session):
#         _in = ['20210712-1362-4012-8026-5A35685630B2',
#                '20220222-6C28-4069-8006-082BE12BEB32',
#                '20200630-3E0D-4061-80C1-F7897E112F00',
#                '20210923-FB1F-4023-80F6-9ECB3F5A0FA8',
#                '20220201-19C9-40B0-8082-DF8A9067705D',
#                '20220201-8B00-40C2-8002-EF7E53ED1220',
#                '20220201-A55A-40B8-8071-EC8733AFFA8E',
#                '20220202-B042-4021-803D-09E15DADE8A4',
#                '20190411-5A3A-40AC-80B3-8B405633C8BA',
#                '20190327-A48C-407F-801F-DA33CB4FBBE9',
#                '20191117-BF71-40FE-8016-1E7E4A3A4780']
#         output = []
#         for item in get_shops_in(session, _in):
#             output.append({
#                 "id": item["uuid"],
#                 "name": '{} ‚û°Ô∏è'.format(item["name"]).upper()
#             })
#
#         return output


# class AfsInput:
#     name = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"
#     desc = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ"
#     type = "LOCATION"
#
#     def get_options(self, session: Session):
#         output = [{"name": "—á–µ–∫–∏–Ω".upper()}]
#
#         return output


class PhotoTerritory1Input:
    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ —Ç–µ—Ä–µ—Ç–æ—Ä–∏ 1 üì∑".upper()
    type = "PHOTO"


class PhotoTerritory2Input:
    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ —Ç–µ—Ä–µ—Ç–æ—Ä–∏ 2 üì∑".upper()
    type = "PHOTO"


class PhotoMRCInput:
    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –ú–†–¶ üì∑".upper()
    type = "PHOTO"


class CashRegisterPhotoInput:
    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Å—Å—ã üì∑".upper()
    type = "PHOTO"


class –°abinetsPhotoInput:
    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ —à–∫–∞—Ñ–æ–≤ üì∑".upper()
    type = "PHOTO"


class showcasePhoto1Input:
    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –≤–∏—Ç—Ä–∏–Ω—ã 1 üì∑".upper()
    type = "PHOTO"


class showcasePhoto2Input:
    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –≤–∏—Ç—Ä–∏–Ω—ã 2 üì∑".upper()
    type = "PHOTO"


class showcasePhoto3Input:
    name = "–ú–∞–≥–∞–∑–∏–Ω"
    desc = "–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –≤–∏—Ç—Ä–∏–Ω—ã 3 üì∑".upper()
    type = "PHOTO"


class CountingMoneyInput:
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ö–æ–¥–∏—Ç—å—Å—è/–Ω–µ —Å—Ö–æ–¥–∏—Ç—å—Å—è (–ø–µ—Ä–µ—Å—á–µ—Ç –¥–µ–Ω–µ–≥)".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = (
            {"id": "converge", "name": "–°—Ö–æ–¥–∏—Ç—å—Å—è ‚û°Ô∏è".upper()},
            {"id": "more", "name": "–ë–æ–ª—å—à–µ ‚û°Ô∏è".upper()},
            {"id": "less", "name": "–ú–µ–Ω—å—à–µ ‚û°Ô∏è".upper()},
        )
        return output


class Counting_MoneyInput:
    desc = "–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É ‚úçÔ∏è".upper()
    type = "MESSAGE"


shop_data = (
    "20190411-5A3A-40AC-80B3-8B405633C8BA",
    "20191117-BF71-40FE-8016-1E7E4A3A4780",
    "20231001-6611-407F-8068-AC44283C9196",
    "20190327-A48C-407F-801F-DA33CB4FBBE9",
)


def get_inputs(session: Session):

    # –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Å—Å–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if session.params["inputs"]["0"]:
        # –ï—Å–ª–∏ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ - "shift_opening_report"
        if session.params["inputs"]["0"]["report"] == "shift_opening_report":
            if "shop" in session.params["inputs"]["0"]:
                if "counting" in session.params["inputs"]["0"]:
                    if session.params["inputs"]["0"]["counting"] == "converge":
                        # –ï—Å–ª–∏ –ø–æ–¥—Å—á–µ—Ç —Ä–∞–≤–µ–Ω "converge", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
                        return {}
                    else:
                        return {
                            "counting_money": Counting_MoneyInput,
                        }

                else:
                    if (
                        session.params["inputs"]["0"]["shop"]
                        == "20220222-6C28-4069-8006-082BE12BEB32"
                    ):
                        return {
                            "location": AfsInput,
                            "cash_register_photo": CashRegisterPhotoInput,
                            "—Åabinets_photo": –°abinetsPhotoInput,
                            "showcase_photo1": showcasePhoto1Input,
                            "showcase_photo2": showcasePhoto2Input,
                            "showcase_photo3": showcasePhoto3Input,
                            "photo_territory_1": PhotoTerritory1Input,
                            "photo_territory_2": PhotoTerritory2Input,
                            "counting": CountingMoneyInput,
                        }
                    if session.params["inputs"]["0"]["shop"] in shop_data:
                        return {
                            "location": AfsInput,
                            "cash_register_photo": CashRegisterPhotoInput,
                            "—Åabinets_photo": –°abinetsPhotoInput,
                            "showcase_photo1": showcasePhoto1Input,
                            "showcase_photo2": showcasePhoto2Input,
                            "showcase_photo3": showcasePhoto3Input,
                            "mrc_photo": PhotoMRCInput,
                            "photo_territory_1": PhotoTerritory1Input,
                            "photo_territory_2": PhotoTerritory2Input,
                            "counting": CountingMoneyInput,
                        }
                    else:
                        return {
                            "shop": ShopInput,
                            "location": AfsInput,
                            "cash_register_photo": CashRegisterPhotoInput,
                            "—Åabinets_photo": –°abinetsPhotoInput,
                            "showcase_photo1": showcasePhoto1Input,
                            "showcase_photo2": showcasePhoto2Input,
                            "photo_territory_1": PhotoTerritory1Input,
                            "photo_territory_2": PhotoTerritory2Input,
                            "counting": CountingMoneyInput,
                        }
            else:
                return {"shop": ShopInput}
        if session.params["inputs"]["0"]["report"] == "get_shift_opening_report":
            if "period" in session.params["inputs"]["0"]:
                if session.params["inputs"]["0"]["period"] == "day":
                    return {}
                else:
                    return {
                        "openDate": OpenDatePast2Input,
                    }
            else:
                return {
                    "shop": ShopInput,
                    # "period": PeriodDateInput,
                }
        if session.params["inputs"]["0"]["report"] == "get_schedules":
            return {}
        if session.params["inputs"]["0"]["report"] == "get_break":
            if "period" in session.params["inputs"]["0"]:
                if session.params["inputs"]["0"]["period"] == "day":
                    return {}
                else:
                    return {
                        "openDate": OpenDatePast2Input,
                    }
            else:
                return {
                    "shop": ShopInput,
                    "period": PeriodDateInput,
                }

    else:
        return {
            "report": ReportsShiftOpeningInput,
        }


def generate(session: Session):
    _dict = {}
    _dict2 = {}
    if session.params["inputs"]["0"]["report"] == "shift_opening_report":
        result = []
        session.params["inputs"]["0"]["distribution_list"] = "yes"
        session.params["inputs"]["0"]["locationData"] = session.params["inputs"]["0"][
            "location"
        ]["data"]
        session.params["inputs"]["0"]["x_type"] = "OPEN"
        params = session.params["inputs"]["0"]

        since = utcnow().replace(hour=3, minute=00).isoformat()
        until = utcnow().replace(hour=20, minute=59).isoformat()

        shop = params["shop"]
        plan_today = Plan.objects(
            __raw__={
                "closeDate": {"$gte": since, "$lt": until},
                "shop_id": shop,
            }
        ).first()
        if plan_today:
            plan = plan_today
        else:
            generate_plan()
            plan = Plan.objects(
                __raw__={
                    "closeDate": {"$gte": since, "$lt": until},
                    "shop_id": shop,
                }
            ).first()
        Shift_Opening_Report.objects(
            user_id=session.user_id,
            locationData=session.params["inputs"]["0"]["locationData"],
        ).update(**params, upsert=True)
        # –¢–æ–≤–∞—Ä –¥–æ–±. –º–æ—Ç–∏–≤–∞—Ü–∏–∏
        documents_mot = (
            GroupUuidAks.objects(shop_id=shop, x_type="MOTIVATION_UUID")
            .order_by("-closeDate")
            .first()
        )
        if documents_mot:
            # products = Products.objects(group=False, uuid__in=documents.uuid)
            dict_mot = {"–¢–æ–≤–∞—Ä –¥–æ–±. –º–æ—Ç–∏–≤–∞—Ü–∏–∏".upper(): ""}
            for uuid, motivation in documents_mot.uuid.items():
                products = Products.objects(group=False, uuid=uuid).only("name").first()
                dict_mot.update({"{}:".format(products.name): "{}‚Ç±".format(motivation)})
            result.append(dict_mot)
        # –û–∫–ª–∞–¥
        documents_salary = (
            GroupUuidAks.objects(shop_id=shop, x_type="SALARY")
            .order_by("-closeDate")
            .first()
        )
        if documents_salary:
            result.append({"–û–ö–õ–ê–î:": "{}‚Ç±".format(documents_salary.salary)})
        # –°—É–º–º–∞ –¥–æ–ø–ª–∞—Ç—ã –∫ –∑–ø
        documents_surcharge = (
            GroupUuidAks.objects(
                employee_uuid=str(session.user_id), x_type="ASSING_A_SURCHARGE"
            )
            .order_by("-closeDate")
            .first()
        )

        if documents_surcharge:
            result.append(
                {"–°–£–ú–ú–ê –î–û–ü–õ–ê–¢–´:": "{}‚Ç±".format(documents_surcharge.surcharge)}
            )
        result.append(
            {
                "–ü–ª–∞–Ω –ø–æ Fyzzi/–≠–ª–µ–∫—Ç—Ä–æ".upper(): "{}‚Ç±".format(int(plan.sum)),
            }
        )
        if session.params["inputs"]["0"]["counting"] == "converge":
            result.append({"‚úÖ–†—Å—Ö–æ–∂–¥–µ–Ω–∏–π –ø–æ –∫–∞—Å—Å–µ (–ø–µ—Ä–µ—Å—á–µ—Ç –¥–µ–Ω–µ–≥)".upper(): "–ù–ï–¢"})
        else:
            if session.params["inputs"]["0"]["counting"] == "more":
                counting = "+"
            else:
                counting = "-"

            result.append(
                {
                    "üî¥–†—Å—Ö–æ–∂–¥–µ–Ω–∏–π –ø–æ –∫–∞—Å—Å–µ (–ø–µ—Ä–µ—Å—á–µ—Ç –¥–µ–Ω–µ–≥)".upper(): "{}{}‚Ç±".format(
                        counting, session.params["inputs"]["0"]["counting_money"]
                    )
                }
            )

        result.append(
            {
                "‚úÖ–°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞".upper(): get(params["location"]["data"]).isoformat()[
                    0:16
                ]
            }
        )

        return {}, result

    if session.params["inputs"]["0"]["report"] == "get_shift_opening_report":
        params = session.params["inputs"]["0"]

        shops = get_shops(session)
        shop_id = shops["shop_id"]
        shop_name = shops["shop_name"]

        _dict = {}
        _dict2 = {}
        documents = (
            Shift_Opening_Report.objects(
                __raw__={
                    # 'locationData': {'$gte': since, '$lt': until},
                    "shop": {"$in": shop_id},
                }
            )
            .order_by("-locationData")
            .first()
        )
        if documents:
            for i in documents:
                if "photo" in i:
                    _dict[i] = documents[i]["photo"]
            employees = Employees.objects(lastName=str(documents["user_id"])).first()
            last_name = employees.lastName
            name_ = employees.name
            _dict2.update(
                {
                    "–ú–∞–≥–∞–∑–∏–Ω:".upper(): "{}:".format(shop_name).upper(),
                }
            )
            if "counting" in documents:
                if documents.counting == "converge":
                    _dict2.update(
                        {"‚úÖ–†—Å—Ö–æ–∂–¥–µ–Ω–∏–π –ø–æ –∫–∞—Å—Å–µ (–ø–µ—Ä–µ—Å—á–µ—Ç –¥–µ–Ω–µ–≥)".upper(): "–ù–ï–¢"}
                    )
                else:
                    if documents.counting == "more":
                        counting = "+"
                    else:
                        counting = "-"

                    _dict2.update(
                        {
                            "üî¥–†—Å—Ö–æ–∂–¥–µ–Ω–∏–π –ø–æ –∫–∞—Å—Å–µ (–ø–µ—Ä–µ—Å—á–µ—Ç –¥–µ–Ω–µ–≥)".upper(): "{}{}‚Ç±".format(
                                counting, documents.counting_money
                            )
                        }
                    )

            _dict2.update(
                {
                    "–°–æ—Ç—Ä—É–¥–Ω–∏–∫".upper(): name_,
                    "–í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è TT".upper(): documents["locationData"][0:16],
                    # "–ö–∞—Å—Å–∞".upper(): documents["counting_money"],
                }
            )

            return _dict, [_dict2]
        else:
            return {}, [{"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö".upper(): ""}]

    if session.params["inputs"]["0"]["report"] == "get_schedules":
        shops = get_shops_user_id(session)

        since = utcnow().replace(hour=2).isoformat()
        # _in = [
        #     "20210712-1362-4012-8026-5A35685630B2",
        #     "20220222-6C28-4069-8006-082BE12BEB32",
        #     "20200630-3E0D-4061-80C1-F7897E112F00",
        #     "20210923-FB1F-4023-80F6-9ECB3F5A0FA8",
        #     "20220201-19C9-40B0-8082-DF8A9067705D",
        #     "20220201-8B00-40C2-8002-EF7E53ED1220",
        #     "20220201-A55A-40B8-8071-EC8733AFFA8E",
        #     "20220202-B042-4021-803D-09E15DADE8A4",
        #     "20190411-5A3A-40AC-80B3-8B405633C8BA",
        #     "20190327-A48C-407F-801F-DA33CB4FBBE9",
        #     "20191117-BF71-40FE-8016-1E7E4A3A4780",
        # ]
        result = {}

        for shop in shops:
            pprint(shop["name"])

            # if shop["uuid"] in _in:
            pprint(shop["uuid"])
            documents = GetTime.objects(
                __raw__={"openingData": {"$gte": since}, "shopUuid": shop["uuid"]}
            ).first()
            pprint(documents)

            if documents:
                # pprint(doc['openingData'])
                user_id = str(documents.user_id)
                # pprint(user_id)
                employees = (
                    Employees.objects(lastName=str(user_id)).only("name").first()
                )
                pprint(employees.name)
                if documents["openingData"]:
                    result["{}".format(shop["name"])] = "{} {}".format(
                        employees.name, documents["openingData"][11:16]
                    )
            else:
                result.update({shop["name"]: "–ï–©–ï –ù–ï –û–¢–ö–†–´–¢–ê!!!".upper()})
        pprint(result)

        return {}, [result]

    if session.params["inputs"]["0"]["report"] == "get_break":
        params = session.params["inputs"]["0"]

        period = get_period_day(session)
        since = period["since"]
        until = period["until"]

        shops = get_shops(session)
        shop_id = shops["shop_id"]
        shop_name = shops["shop_name"]

        documents_break_report = Shift_Opening_Report.objects(
            __raw__={
                "openData": {"$gte": since, "$lt": until},
                "x_type": "BREAK",
                # "break": "open",
                "shop_id": {"$in": shop_id},
            }
        )
        break_data = []
        total_delta = 0
        if len(documents_break_report) > 0:
            for doc in documents_break_report:
                employees = (
                    Employees.objects(lastName=str(doc["user_id"])).only("name").first()
                )
                if "closeDate" in doc:
                    delta = (
                        (get(doc["closeDate"]) - get(doc["openData"])).seconds
                        // 60
                        % 60
                    )
                    total_delta += delta
                    break_data.append(
                        {
                            "–ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞—á–∞–ª—Å—è".upper(): doc["openData"][:16],
                            "–ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è".upper(): doc["closeDate"][:16],
                            "–í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞".upper(): f"{delta} –º–∏–Ω—É—Ç",
                        }
                    )
                else:
                    break_data.append(
                        {
                            "–ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞—á–∞–ª—Å—è".upper(): doc["openData"][:16],
                        }
                    )

            break_data.append(
                {
                    "–ú–∞–≥–∞–∑–∏–Ω:": shop_name,
                    "–ü—Ä–æ–¥–∞–≤–µ—Ü:": employees.name,
                    "–ò—Ç–æ–≥–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞".upper(): f"{total_delta} –º–∏–Ω—É—Ç",
                }
            )
        else:
            break_data.append({since[:10]: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö".upper()})

        return [], break_data

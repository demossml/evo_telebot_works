# –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –≥—Ä—É–ø–ø–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É –≤ —à—Ç—É–∫–∞—Ö –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞:
# - shop_id, id –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (–∑–∞–≥—Ä—É–∑–∏—Ç—å id –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ –±–∞–∑—ã tc)
# - group_id,  id –≥—Ä—É–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ (–∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã tc)
# - period, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (–¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è,  –¥–≤–µ –Ω–µ–¥–µ–ª–∏, –º–µ—Å—è—Ü)

from bd.model import Session, Shop, Products, Documents
from arrow import utcnow, get
from pprint import pprint
from .util import get_shops_user_id
from collections import OrderedDict
from io import BytesIO
import plotly.express as px


name = " üí®üí®üí® Fyzzi/–≠–ª–µ–∫—Ç—Ä–æ ‚û°Ô∏è".upper()
desc = "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –≤ —à—Ç. –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º –≤ —à—Ç"
mime = "image_bytes"


def get_inputs(session: Session):
    return {}


def generate(session: Session):
    shops = get_shops_user_id(session)
    # shops_id = [v.uuid for v in shops]
    # pprint(shops_id)
    group_id = (
        "bc9e7e4c-fdac-11ea-aaf2-2cf05d04be1d",
        "568905bd-9460-11ee-9ef4-be8fe126e7b9",
        "2b8eb6b4-92ea-11ee-ab93-2cf05d04be1d",
        "568905be-9460-11ee-9ef4-be8fe126e7b9",
        "ad8afa41-737d-11ea-b9b9-70c94e4ebe6a",
        "8a8fcb5f-9582-11ee-ab93-2cf05d04be1d",
        "78ddfd78-dc52-11e8-b970-ccb0da458b5a",
    )

    since = utcnow().replace(hour=3, minute=00).isoformat()
    until = utcnow().isoformat()

    result = []
    _dict = {}
    for shop in shops:
        products = Products.objects(
            __raw__={"parentUuid": {"$in": group_id}, "shop_id": shop["uuid"]}
        ).only("uuid")

        products_uuid = [element.uuid for element in products]
        result_shop = {}
        shop_ = Shop.objects(uuid=shop["uuid"]).only("name").first()
        shop_name = shop_.name
        result_shop.update({"–¢–¢": shop_name})
        documents = Documents.objects(
            __raw__={
                "closeDate": {"$gte": since, "$lt": until},
                "shop_id": shop["uuid"],
                "x_type": "SELL",
                "transactions.commodityUuid": {"$in": products_uuid},
            }
        )

        for doc in documents:
            for trans in doc["transactions"]:
                # pprint(77)
                if trans["x_type"] == "REGISTER_POSITION":
                    # pprint(88)
                    if trans["commodityUuid"] in products_uuid:
                        # pprint({trans['commodityName']: trans['quantity']})
                        if trans["commodityName"] in _dict:
                            _dict[trans["commodityName"]] += trans["quantity"]
                            if trans["commodityName"] in result_shop:
                                result_shop[trans["commodityName"]] += trans["quantity"]
                            else:
                                result_shop[trans["commodityName"]] = trans["quantity"]
                        else:
                            # pprint({trans['commodityName']: trans['quantity']})
                            _dict[trans["commodityName"]] = trans["quantity"]
                            result_shop[trans["commodityName"]] = trans["quantity"]

        # pprint(result_shop)
        if len(result_shop) > 1:
            result.append(result_shop)
    # pprint(result)

    _dict = dict(OrderedDict(sorted(_dict.items(), key=lambda t: -t[1])))

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂
    products_names = list(_dict.keys())
    sum_sales_quantity = list(_dict.values())

    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    fig = px.pie(
        names=products_names,
        values=sum_sales_quantity,
        title="–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏ –ø–æ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º  –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º –≤ —à—Ç.",
        labels={"names": "–ü—Ä–æ–¥—É–∫—Ç", "values": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"},
        # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    ).update_traces(
        # –®–∞–±–ª–æ–Ω —Ç–µ–∫—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
        # %{label}: –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        # %{value:$,s}: –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞–ø—è—Ç—ã—Ö
        # <br>: –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ (HTML —Ç–µ–≥)
        # %{percent}: –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        texttemplate="%{label}: <br>%{percent}",
        showlegend=False,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º showlegend –≤ False, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –ª–µ–≥–µ–Ω–¥—É
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    fig.update_layout(
        title="–ü—Ä–æ–¥–∞–∂–∏  –ø–æ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º –≤ —à—Ç.",
        font=dict(size=18, family="Arial, sans-serif", color="black"),
        # plot_bgcolor="black",  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –≤ –æ–±—ä–µ–∫—Ç BytesIO
    image_buffer = BytesIO()

    fig.write_image(image_buffer, format="png", width=900, height=900)

    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
    image_buffer.seek(0)

    return result, image_buffer

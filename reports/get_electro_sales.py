# –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –≥—Ä—É–ø–ø–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É –≤ —à—Ç—É–∫–∞—Ö –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞:
# - shop_id, id –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (–∑–∞–≥—Ä—É–∑–∏—Ç—å id –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ –±–∞–∑—ã tc)
# - group_id,  id –≥—Ä—É–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ (–∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã tc)
# - period, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (–¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è,  –¥–≤–µ –Ω–µ–¥–µ–ª–∏, –º–µ—Å—è—Ü)

from bd.model import Session, Shop, Products, Documents
from arrow import utcnow, get
from pprint import pprint
from .util import get_shops_user_id, get_top_n_sales
from collections import OrderedDict
from io import BytesIO
import plotly.express as px
import io


name = " üí®üí®üí® Fyzzi/–≠–ª–µ–∫—Ç—Ä–æ ‚û°Ô∏è".upper()
desc = "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –≤ —à—Ç. –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º –≤ —à—Ç"
mime = "image_bytes"


def get_inputs(session: Session):
    return {}


def generate(session: Session):
    shops = get_shops_user_id(session)
    # shops_id = [v.uuid for v in shops]
    # pprint(shops_id)
    group_id = (
        "bc9e7e4c-fdac-11ea-aaf2-2cf05d04be1d",
        "568905bd-9460-11ee-9ef4-be8fe126e7b9",
        "2b8eb6b4-92ea-11ee-ab93-2cf05d04be1d",
        "568905be-9460-11ee-9ef4-be8fe126e7b9",
        "ad8afa41-737d-11ea-b9b9-70c94e4ebe6a",
        "8a8fcb5f-9582-11ee-ab93-2cf05d04be1d",
        "78ddfd78-dc52-11e8-b970-ccb0da458b5a",
    )

    since = utcnow().replace(hour=3, minute=00).isoformat()
    until = utcnow().isoformat()

    result = []
    _dict = {}
    for shop in shops:
        products = Products.objects(
            __raw__={"parentUuid": {"$in": group_id}, "shop_id": shop["uuid"]}
        ).only("uuid")

        products_uuid = [element.uuid for element in products]
        result_shop = {}
        shop_ = Shop.objects(uuid=shop["uuid"]).only("name").first()
        shop_name = shop_.name
        result_shop.update({"–¢–¢": shop_name})
        documents = Documents.objects(
            __raw__={
                "closeDate": {"$gte": since, "$lt": until},
                "shop_id": shop["uuid"],
                "x_type": "SELL",
                "transactions.commodityUuid": {"$in": products_uuid},
            }
        )

        for doc in documents:
            for trans in doc["transactions"]:
                # pprint(77)
                if trans["x_type"] == "REGISTER_POSITION":
                    # pprint(88)
                    if trans["commodityUuid"] in products_uuid:
                        # pprint({trans['commodityName']: trans['quantity']})
                        if trans["commodityName"] in _dict:
                            _dict[trans["commodityName"]] += trans["quantity"]
                            if trans["commodityName"] in result_shop:
                                result_shop[trans["commodityName"]] += trans["quantity"]
                            else:
                                result_shop[trans["commodityName"]] = trans["quantity"]
                        else:
                            # pprint({trans['commodityName']: trans['quantity']})
                            _dict[trans["commodityName"]] = trans["quantity"]
                            result_shop[trans["commodityName"]] = trans["quantity"]

        # pprint(result_shop)
        if len(result_shop) > 1:
            result.append(result_shop)
    # pprint(result)

    _dict = dict(OrderedDict(sorted(_dict.items(), key=lambda t: -t[1])))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–∂
    sorted_sales = get_top_n_sales(_dict)

    if len(sorted_sales[0]) > 0:

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂
        shop_names = list(sorted_sales[0].keys())
        sum_sales_quantity = list(sorted_sales[0].values())
        sum_sales_quantity_total = sum(sorted_sales[0].values())

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
        fig = px.bar(
            y=shop_names,
            x=sum_sales_quantity,
            title=f"–ü—Ä–æ–¥–∞–∂–∏ –≤ —à—Ç. . –¢–æ–ø {sorted_sales[1]}.–ù–∞—á–∞–ª–æ/–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ - {since[0:10]}/{until[0:10]}",
            labels={"y": "–ú–∞–≥–∞–∑–∏–Ω", "x": "–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂"},
            # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ –≤–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é
        )
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        font_size = 24  # –ó–∞–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞

        pprint(font_size)
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        fig.update_layout(
            font=dict(size=font_size, family="Arial, sans-serif", color="black"),
            # plot_bgcolor="black",  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å —Å—É–º–º–∞–º–∏ –ø—Ä–æ–¥–∞–∂
        for i, value in enumerate(sum_sales_quantity):
            fig.add_annotation(
                x=value,
                y=shop_names[i],
                text=f"{value:,}",  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
                showarrow=True,
                arrowhead=2,
                arrowcolor="black",
                ax=40,
                ay=0,
            )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –æ—Å–µ–π
        fig.update_xaxes(title=f"–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ {sum_sales_quantity_total}—à—Ç.")

        fig.update_yaxes(
            title=f"–ú–∞–≥–∞–∑–∏–Ω {shop_name}", autorange="reversed"
        )  # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ—Å—å Y

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –≤ –æ–±—ä–µ–∫—Ç BytesIO
        image_buffer = io.BytesIO()

        target_width = 1700
        # target_height = 2000
        target_height = max(700, len(shop_names) * 54)

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
        dynamic_aspect_ratio = (
            len(shop_names) / 70
        )  # –ü—Ä–∏–º–µ—Ä: –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é
        optimal_width = min(target_width, target_height / dynamic_aspect_ratio)
        optimal_height = min(target_height, target_width * target_height)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        fig.write_image(
            image_buffer, format="png", width=optimal_width, height=optimal_height
        )

        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
        image_buffer.seek(0)

    return result, image_buffer

from arrow import utcnow, get
from bd.model import Shop, AfsRequest, Employees, GetTime, Status, TimeSync

from pprint import pprint
from reports.util import (
    get_plan,
    analyze_sales_parallel,
)
import plotly.express as px
from io import BytesIO
import time
import logging
import sys

logger = logging.getLogger(__name__)


def status_shop(shop_id: str) -> bool:
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "deleted"
    doc_status = Status.objects(shop=shop_id, status="deleted").first()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å "restore", –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
    return not (doc_status and doc_status.status != "restore")


# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
def send_scheduled_message():
    since = utcnow().replace(hour=2).isoformat()

    result = {}
    for shop in Shop.objects():
        if status_shop(shop["uuid"]):
            documents = GetTime.objects(
                __raw__={"openingData": {"$gte": since}, "shopUuid": shop["uuid"]}
            )

            result[shop["name"]] = "–ï–©–ï –ù–ï –û–¢–ö–†–´–¢–ê!!!"

            for doc in documents:
                user_id = str(doc.user_id)
                employees = [
                    element["name"]
                    for element in Employees.objects(lastName=user_id).only("name")
                ]
                if doc["openingData"]:
                    result[shop["name"]] = "{} {}".format(
                        employees[0], doc["openingData"][11:16]
                    )
    return [result]


def format_message_list4(obj):
    text = ""  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
    messages = []  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

    if len(obj) > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ø–∏—Å–∫–µ.
        for i in obj:  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –æ–±—ä–µ–∫—Ç—É –≤ —Å–ø–∏—Å–∫–µ.
            for k, v in i.items():  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ–±—ä–µ–∫—Ç–µ.
                key = str(k)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á –≤ —Å—Ç—Ä–æ–∫—É.
                val = str(v)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É.
                total_len = len(key) + len(
                    val
                )  # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É –∫–ª—é—á–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏—è.
                pad = (
                    30 - total_len % 30
                )  # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤, —á—Ç–æ–±—ã –≤—ã—Ä–æ–≤–Ω—è—Ç—å —Ç–µ–∫—Å—Ç.

                text += key  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –∫ —Ç–µ–∫—Å—Ç—É.

                if pad > 0:  # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è,
                    text += " " * pad  # –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö.

                if total_len > 30:  # –ï—Å–ª–∏ –æ–±—â–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 30 —Å–∏–º–≤–æ–ª–æ–≤,
                    text += " " * 2  # –¥–æ–±–∞–≤–ª—è–µ–º 2 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞.

                text += str(v)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫ —Ç–µ–∫—Å—Ç—É.
                text += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –∫–ª—é—á–∞–º–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
            text += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
            text += "******************************"  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É.
            text += "\n"

        text += ""  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ (—ç—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –æ—à–∏–±–∫–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç).
        index = 0  # –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏.
        size = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
        while len(text) > 0:  # –ü–æ–∫–∞ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:
            part = text[
                index : index + size
            ]  # –í—ã–±–∏—Ä–∞–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–æ–π –Ω–µ –±–æ–ª–µ–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤.
            index = part.rfind(
                "\n"
            )  # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏ –≤ —á–∞—Å—Ç–∏.
            if index == -1:  # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω,
                index = len(text)  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞.
            part = text[
                0:index
            ]  # –í—ã–±–∏—Ä–∞–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –¥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏.
            messages.append(
                "```\n" + part + "\n```"
            )  # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π,
            text = text[index:].strip()  # –∏ —É–¥–∞–ª—è–µ–º –µ–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

        return messages  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.


def get_electro_sales_plan() -> list[dict]:
    start_time = time.time()

    data_resul = {}
    data_sale = analyze_sales_parallel()

    sales_data = {}

    for k, v in data_sale.items():
        doc_status = Status.objects(shop=k, status="deleted").first()
        if not doc_status:
            plan = get_plan(k)
            if v >= plan.sum:
                symbol = "‚úÖ"
            else:
                symbol = "üî¥"

            shop = Shop.objects(uuid__exact=k).only("name").first()

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–∞—Ö –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–¥–∞–∂–∞—Ö
            data_resul["{}{}".format(symbol, shop.name[:9]).upper()] = (
                "–ø–ª.{}‚ÇΩ/–ø—Ä.{}‚ÇΩ".format(plan.sum, v)
            )

            sales_data[shop.name] = v

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂
    shop_names = list(sales_data.keys())
    sum_sales_ = list(sales_data.values())

    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    fig = px.pie(
        names=shop_names,
        values=sum_sales_,
        title="–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏ –ø–æ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º  –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º",
        labels={"names": "–ú–∞–≥–∞–∑–∏–Ω—ã", "values": "–í—ã—Ä—É—á–∫–∞"},
        # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    ).update_traces(
        # –®–∞–±–ª–æ–Ω —Ç–µ–∫—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
        # %{label}: –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        # %{value:$,s}: –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞–ø—è—Ç—ã—Ö
        # <br>: –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ (HTML —Ç–µ–≥)
        # %{percent}: –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        texttemplate="%{label}: <br>%{percent}",
        showlegend=False,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º showlegend –≤ False, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –ª–µ–≥–µ–Ω–¥—É
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    fig.update_layout(
        title="–ü—Ä–æ–¥–∞–∂–∏  –ø–æ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞–º –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º",
        font=dict(size=18, family="Arial, sans-serif", color="black"),
        # plot_bgcolor="black",  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –≤ –æ–±—ä–µ–∫—Ç BytesIO
    image_buffer = BytesIO()

    fig.write_image(image_buffer, format="png", width=900, height=900)

    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
    image_buffer.seek(0)
    end_time = time.time()
    execution_time = end_time - start_time
    logger.info(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ sync_evo: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")

    return [data_resul], image_buffer
